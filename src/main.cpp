#include <Arduino.h>
#include <jbd013_api.h>
#include <SPI.h>
#include <driver/spi_master.h>
#include <HardwareSerial.h>
#include <string.h>
#include <WiFi.h>
#include <WebServer.h>
#include <FS.h>
#include <SPIFFS.h>
#include "../group1_image_improved.h"
// 引脚定义
//#define TFT_CLK 14
#define TFT_CS0 33
#define TFT_CS1 3
#define TFT_D0 37
#define TFT_D1 40
#define TFT_D2 23
#define TFT_D3 5
// SPI引脚
#define SPI_CLK 36  // SPI时钟引脚 3
#define SPI_MISO 37 // SPI MISO引脚  46
#define SPI_MOSI 35 // SPI MOSI引脚  42
#define SPI_CS 33  // SPI片选引脚 spi_wr_byte有Bug所以这条无效  这条要在hal_Driver改
// 串口映射
//HardwareSerial MySerial_esp32(1);
// 设置面板画面

uint8_t screenRow = 0x28;

u8 image[22480] = {};

u8 image1[10240] = {};
u8 image2[10240] = {};
u8 image3[10240] = {};
u8 image4[10240] = {};
u8 image5[10240] = {};
u8 image6[10240] = {};
u8 image7[10240] = {};
u8 image8[10240] = {};
u8 image9[10240] = {};
u8 image10[10240] = {};
u8 image11[10240] = {};
u8 image12[10240] = {};
u8 image13[10240] = {};
u8 image14[10240] = {};
u8 image15[10240] = {};
u8 image16[10240] = {};
u8 image17[10240] = {};
u8 image18[10240] = {};
u8 image19[10240] = {};
u8 image20[10240] = {};
u8 image21[10240] = {};
u8 image22[10240] = {};
u8 image23[10240] = {};
u8 image24[10240] = {};
u8 image25[10240] = {};
u8 image26[10240] = {};
u8 image27[10240] = {};
u8 image28[10240] = {};
u8 image29[10240] = {};
u8 image30[10240] = {};

u8 fontA[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
u8 fontB[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0xFF,0x00,0xFF,0xFF,0x00,0x00,0x00, 0x00,0xFF,0xFF,0x00,0x00,0xFF,0x00,0x00, 0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00, 0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00, 0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00, 0x00,0xFF,0xFF,0x00,0x00,0xFF,0x00,0x00, 0x00,0xFF,0x00,0xFF,0xFF,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};
u8 fontC[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0xFF,0xFF,0xFF,0x00,0x00, 0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00, 0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00, 0x00,0x00,0x00,0xFF,0xFF,0xFF,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
u8 fontD[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00, 0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x00, 0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00, 0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00, 0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00, 0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00, 0x00,0xFF,0x00,0x00,0x00,0xFF,0xFF,0x00, 0x00,0x00,0xFF,0xFF,0xFF,0x00,0xFF,0xFF, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};
u8 fontE[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};
u8 fontF[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};
u8 fontG[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,};
u8 fontH[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0xFF,0xFF,0xFF,0x00,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};
u8 fontI[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};
u8 fontJ[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,};
u8 fontK[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0xFF,0x00,0x00,0xFF,0xFF,0xFF,0x00, 0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00, 0x00,0xFF,0x00,0xFF,0x00,0x00,0x00,0x00, 0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00, 0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00, 0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00, 0xFF,0xFF,0xFF,0x00,0xFF,0xFF,0xFF,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};
u8 fontL[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00, 0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00, 0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};
u8 fontM[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00, 0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF, 0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF, 0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF, 0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF, 0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF, 0xFF,0xFF,0xFF,0x00,0xFF,0xFF,0x00,0xFF, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};
u8 fontN[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0xFF,0xFF,0xFF,0x00,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};
u8 fontO[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};
u8 fontP[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,
};
u8 fontQ[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,};
u8 fontR[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};
u8 fontS[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};
u8 fontT[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};
u8 fontU[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};
u8 fontV[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x00,0xFF,0xFF,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};
u8 fontW[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0xFF,0xFF,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0xFF,0x00,0x00,0xFF,0x00,0xFF,0x00,0x00,0xFF,0x00,0xFF,0xFF,0x00,0xFF,0x00,0x00,0xFF,0x00,0xFF,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};
u8 fontX[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x00,0xFF,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0xFF,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};
u8 fontY[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x00,0x00,0xFF,0xFF,0xFF,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,};
u8 fontZ[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};
u8 fontDot[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,};
u8 fontSpace[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};
u8 fontEndot[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};

u8 font1[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};

u8 font2[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};

u8 font3[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};

u8 font4[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};

u8 font5[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};

u8 font6[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};

u8 font7[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};

u8 font8[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};

u8 font9[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};

u8 font0[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};


int drawed = 0;

uint32_t image_len = 20480;

// 文本水平翻转控制变量
bool textFlipEnabled = true;

// 亮度控制变量 (默认为较低亮度)
u16 currentBrightness = 800;

// WiFi和Web服务器配置
const char* wifi_ssid = "Hyperoptic Fibre 93B3";
const char* wifi_password = "pebdriAnU3347Y";
WebServer server(80);  // HTTP端口80

// 上传图像缓冲区
u8* uploadedImageData = nullptr;
u16 uploadedImageWidth = 0;
u16 uploadedImageHeight = 0;
bool hasUploadedImage = false;

// 上传的原始PNG数据
u8* uploadedPngData = nullptr;
size_t uploadedPngSize = 0;

// 图像颜色反转开关（true = 反转）
bool invertEnabled = true;

// FS方式的BIN上传元数据
bool hasUploadedBinFS = false;
u16 fsBinW = 0;
u16 fsBinH = 0;
const char* fsBinPath = "/uploaded.bin";

// 函数声明
void JBD_init(void);
void drawLetter(char letter);
void drawString(const char text[], int len);
void setTextHorizontalFlip(bool enable);
void setBrightness(u16 brightness);
void setBrightnessLow();
void setBrightnessMedium();
void setBrightnessHigh();
void connectToWiFi();
void setupWebServer();
void handleRoot();
void handleBrightness();
void handleFlip();
void handleStatus();
void handleGetBrightness();
void handleGetWiFiStatus();
void handleInvert();
void handleDisplayPower();
void handleUpload();
void handleUploadPage();
void handleUploadBin();
void handleUploadBinPage();
void handleDisplayImage();
void handleUploadChunk();
bool processUploadedPNG(uint8_t* data, size_t length);
void displayUploadedImage();
void createTestUploadedImage();
void processPngToImage();
void renderGreenCircle(u8 *dest, u16 widthPixels, u16 heightRows, u8 grayLevel);
void packPngRowsToPanel(u8 *dest, u16 destWidth, const u8 *src, u16 srcWidth, u16 rowStart, u16 rows);
void packPngScaledRowsToPanel(u8 *dest,
                              u16 destWidth,
                              u16 destHeight,
                              const u8 *src,
                              u16 srcWidth,
                              u16 srcHeight,
                              u16 rowStart,
                              u16 rows,
                              bool invert);

// 配置引脚
void JBD_init(void)
{
  //pinMode(TFT_CLK, OUTPUT);
  pinMode(TFT_CS0, OUTPUT);
  pinMode(TFT_CS1, OUTPUT);
  pinMode(TFT_D0, OUTPUT);  // miso
  pinMode(TFT_D1, OUTPUT); // mosi
  pinMode(TFT_D2, OUTPUT);
  pinMode(TFT_D3, OUTPUT);

  digitalWrite(TFT_CS0,HIGH);
  digitalWrite(TFT_CS1,HIGH);
}

void drawLetter(char letter){
  int lenPerLetter = 8;
  int c_cursor = 0;
  int ret;
  int counter = 0;

  if(letter == 'a'){
    for(int i = 0; i < sizeof(fontA); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontA[i];
      counter++;
    }
    drawed++;
  }
  if(letter == 'b'){
    for(int i = 0; i < sizeof(fontB); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontB[i];
      counter++;
    }
    drawed++;
  }
  if(letter == 'c'){
    for(int i = 0; i < sizeof(fontC); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontC[i];
      counter++;
    }
    drawed++;
  }
  if(letter == 'd'){
    for(int i = 0; i < sizeof(fontD); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontD[i];
      counter++;
    }
    drawed++;
  }
  if(letter == 'e'){
    for(int i = 0; i < sizeof(fontE); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontE[i];
      counter++;
    }
    drawed++;
  }
  if(letter == 'f'){
    for(int i = 0; i < sizeof(fontF); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontF[i];
      counter++;
    }
    drawed++;
  }
  if(letter == 'g'){
    for(int i = 0; i < sizeof(fontG); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontG[i];
      counter++;
    }
    drawed++;
  }
  if(letter == 'h'){
    for(int i = 0; i < sizeof(fontH); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontH[i];
      counter++;
    }
    drawed++;
  }
  if(letter == 'i'){
    for(int i = 0; i < sizeof(fontI); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontI[i];
      counter++;
    }
    drawed++;
  }
  if(letter == 'j'){
    for(int i = 0; i < sizeof(fontJ); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontJ[i];
      counter++;
    }
    drawed++;
  }
  if(letter == 'k'){
    for(int i = 0; i < sizeof(fontK); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontK[i];
      counter++;
    }
    drawed++;
  }
  if(letter == 'l'){
    for(int i = 0; i < sizeof(fontL); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontL[i];
      counter++;
    }
    drawed++;
  }
  if(letter == 'm'){
    for(int i = 0; i < sizeof(fontM); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontM[i];
      counter++;
    }
    drawed++;
  }
  if(letter == 'n'){
    for(int i = 0; i < sizeof(fontN); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontN[i];
      counter++;
    }
    drawed++;
  }
  if(letter == 'o'){
    for(int i = 0; i < sizeof(fontO); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontO[i];
      counter++;
    }
    drawed++;
  }
  if(letter == 'p'){
    for(int i = 0; i < sizeof(fontP); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontP[i];
      counter++;
    }
    drawed++;
  }
  if(letter == 'q'){
    for(int i = 0; i < sizeof(fontQ); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontQ[i];
      counter++;
    }
    drawed++;
  }
  if(letter == 'r'){
    for(int i = 0; i < sizeof(fontR); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontR[i];
      counter++;
    }
    drawed++;
  }
  if(letter == 's'){
    for(int i = 0; i < sizeof(fontS); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontS[i];
      counter++;
    }
    drawed++;
  }
  if(letter == 't'){
    for(int i = 0; i < sizeof(fontT); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontT[i];
      counter++;
    }
    drawed++;
  }
  if(letter == 'u'){
    for(int i = 0; i < sizeof(fontU); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontU[i];
      counter++;
    }
    drawed++;
  }
  if(letter == 'v'){
    for(int i = 0; i < sizeof(fontV); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontV[i];
      counter++;
    }
    drawed++;
  }
  if(letter == 'w'){
    for(int i = 0; i < sizeof(fontW); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontW[i];
      counter++;
    }
    drawed++;
  }
  if(letter == 'x'){
    for(int i = 0; i < sizeof(fontX); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontX[i];
      counter++;
    }
    drawed++;
  }
  if(letter == 'y'){
    for(int i = 0; i < sizeof(fontY); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontY[i];
      counter++;
    }
    drawed++;
  }
  if(letter == 'z'){
    for(int i = 0; i < sizeof(fontZ); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontZ[i];
      counter++;
    }
    drawed++;
  }
  if(letter == ','){
    for(int i = 0; i < sizeof(fontDot); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontDot[i];
      counter++;
    }
    drawed++;
  }
  if(letter == '.'){
    for(int i = 0; i < sizeof(fontEndot); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontEndot[i];
      counter++;
    }
    drawed++;
  }
  if(letter == ' '){
    for(int i = 0; i < sizeof(fontSpace); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontSpace[i];
      counter++;
    }
    drawed++;
  }
  if(letter == '0'){
    for(int i = 0; i < sizeof(font0); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = font0[i];
      counter++;
    }
    drawed++;
  }
  if(letter == '1'){
    for(int i = 0; i < sizeof(font1); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = font1[i];
      counter++;
    }
    drawed++;
  }
  if(letter == '2'){
    for(int i = 0; i < sizeof(font2); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = font2[i];
      counter++;
    }
    drawed++;
  }
  if(letter == '3'){
    for(int i = 0; i < sizeof(font3); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = font3[i];
      counter++;
    }
    drawed++;
  }
  if(letter == '4'){
    for(int i = 0; i < sizeof(font4); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = font4[i];
      counter++;
    }
    drawed++;
  }
  if(letter == '5'){
    for(int i = 0; i < sizeof(font5); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = font5[i];
      counter++;
    }
    drawed++;
  }
  if(letter == '6'){
    for(int i = 0; i < sizeof(font6); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = font6[i];
      counter++;
    }
    drawed++;
  }
  if(letter == '7'){
    for(int i = 0; i < sizeof(font7); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = font7[i];
      counter++;
    }
    drawed++;
  }
  if(letter == '8'){
    for(int i = 0; i < sizeof(font8); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = font8[i];
      counter++;
    }
    drawed++;
  }
  if(letter == '9'){
    for(int i = 0; i < sizeof(font9); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = font9[i];
      counter++;
    }
    drawed++;
  }
}

void drawString(const char text[],int len){
  for (int i=0; i<len; i++) {
      char character = text[i];
      Serial.write(character);
      Serial.write('\r');
      Serial.write('\n');
      drawLetter(character);
  }
}

// 设置文本水平翻转
void setTextHorizontalFlip(bool enable) {
  textFlipEnabled = enable;
  if (enable) {
    set_mirror_mode(1); // Mirror left and right only
  } else {
    set_mirror_mode(0); // Normal display
  }
}

// 设置亮度 (通用函数)
// 亮度范围取决于刷新频率:
// 25Hz: 0-21331, 50Hz: 0-10664, 75Hz: 0-7109, 100Hz: 0-5331
// 125Hz: 0-4264, 150Hz: 0-3366, 175Hz: 0-2907, 200Hz: 0-2558
void setBrightness(u16 brightness) {
  Serial.print("设置亮度: ");
  Serial.print(brightness);
  Serial.print(" (当前: ");
  Serial.print(currentBrightness);
  Serial.println(")");
  
  // 启用状态寄存器写入
  send_cmd(SPI_WR_ENABLE);
  delay_ms(1);
  
  currentBrightness = brightness;
  wr_lum_reg(brightness);
  delay_ms(10); // 给硬件时间处理命令
  
  // 重新启用显示并同步（强制刷新亮度）
  send_cmd(SPI_DISPLAY_ENABLE);
  delay_ms(1);
  send_cmd(SPI_SYNC);
  delay_ms(1);
  
  // 读取回寄存器确认
  u16 readBack = rd_lum_reg();
  Serial.print("读取回的亮度值: ");
  Serial.println(readBack);
  Serial.println("亮度已设置并强制刷新显示");
}

// 设置低亮度 (25% - 适合室内使用)
void setBrightnessLow() {
  setBrightness(800);   // 更保守的低亮度值
}

// 设置中等亮度 (50% - 平衡使用)
void setBrightnessMedium() {
  setBrightness(1600);  // 更保守的中等亮度值
}

// 设置高亮度 (80% - 户外使用)
void setBrightnessHigh() {
  setBrightness(2500);  // 稍高一些的值来测试
}

// WiFi连接函数
void connectToWiFi() {
  Serial.println("正在连接WiFi...");
  WiFi.begin(wifi_ssid, wifi_password);
  
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 30) {
    delay(1000);
    Serial.print(".");
    attempts++;
  }
  
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println();
    Serial.println("WiFi连接成功!");
    Serial.print("IP地址: ");
    Serial.println(WiFi.localIP());
    Serial.print("端口: 80");
    Serial.println();
  } else {
    Serial.println("WiFi连接失败!");
  }
}

// Web服务器路由处理
void handleRoot() {
  String html = "<!DOCTYPE html><html><head><meta charset='UTF-8'>";
  html += "<title>AR眼镜控制面板</title>";
  html += "<style>body{font-family:Arial;margin:40px;background:#f0f0f0;}";
  html += ".container{max-width:600px;margin:0 auto;background:white;padding:30px;border-radius:10px;box-shadow:0 2px 10px rgba(0,0,0,0.1);}";
  html += "h1{color:#333;text-align:center;}";
  html += ".control{margin:20px 0;padding:15px;border:1px solid #ddd;border-radius:5px;}";
  html += "button{padding:10px 20px;margin:5px;border:none;border-radius:5px;cursor:pointer;font-size:16px;}";
  html += ".btn-primary{background:#007bff;color:white;}";
  html += ".btn-success{background:#28a745;color:white;}";
  html += ".btn-warning{background:#ffc107;color:black;}";
  html += ".btn-danger{background:#dc3545;color:white;}";
  html += "</style></head><body>";
  html += "<div class='container'>";
  html += "<h1>🥽 AR眼镜控制面板</h1>";
  
  // WiFi状态显示
  html += "<div class='control' style='background:#e8f5e8;border-left:4px solid #28a745;'>";
  html += "<h3>📡 WiFi状态</h3>";
  html += "<div style='display:flex;justify-content:space-between;align-items:center;'>";
  html += "<div>";
  html += "<strong>网络:</strong> " + String(wifi_ssid) + "<br>";
  html += "<strong>IP地址:</strong> <span id='ipAddress'>" + WiFi.localIP().toString() + "</span><br>";
  html += "<strong>信号强度:</strong> <span id='signalStrength'>" + String(WiFi.RSSI()) + " dBm</span>";
  html += "</div>";
  html += "<div style='font-size:24px;color:#28a745;'>📶</div>";
  html += "</div>";
  html += "</div>";
  
  html += "<div class='control'><h3>💡 亮度控制</h3>";
  html += "<div style='margin-bottom:10px;'>当前亮度: <span id='currentBrightness' style='font-weight:bold;color:#007bff;'>--</span></div>";
  html += "<div style='display:flex;align-items:center;gap:8px;margin-bottom:10px;'>";
  html += "<input id='brightnessInput' type='number' min='0' max='2500' step='50' placeholder='0-2500' style='width:120px;padding:6px;'>";
  html += "<button class='btn-primary' onclick=\"setBrightnessValue()\">设置亮度</button>";
  html += "</div>";
  html += "<button class='btn-primary' onclick=\"setBrightness('low')\">低亮度 (800)</button>";
  html += "<button class='btn-success' onclick=\"setBrightness('medium')\">中亮度 (1600)</button>";
  html += "<button class='btn-warning' onclick=\"setBrightness('high')\">高亮度 (2500)</button>";
  html += "</div>";

  // 颜色反转
  html += "<div class='control'><h3>🎨 颜色反转</h3>";
  html += "<button class='btn-primary' onclick=\"fetch('/invert?enable=true')\">启用反转</button>";
  html += "<button class='btn-danger' onclick=\"fetch('/invert?enable=false')\">禁用反转</button>";
  html += "<div style='margin-top:8px'>当前: <b>";
  html += String(invertEnabled ? "启用" : "禁用");
  html += "</b></div>";
  html += "</div>";
  
  html += "<script>";
  html += "function setBrightness(level) {";
  html += "  fetch('/brightness?level=' + level).then(() => updateBrightness());";
  html += "}";
  html += "function setBrightnessValue() {";
  html += "  const el=document.getElementById('brightnessInput');";
  html += "  let v=parseInt(el.value||'0'); if(isNaN(v)) v=0; if(v<0) v=0; if(v>2500) v=2500;";
  html += "  fetch('/brightness?value=' + v).then(() => updateBrightness());";
  html += "}";
  html += "function updateBrightness() {";
  html += "  fetch('/api/brightness').then(r => r.json()).then(data => {";
  html += "    document.getElementById('currentBrightness').textContent = data.current + ' (reg: ' + data.register + ')';";
  html += "  });";
  html += "}";
  html += "updateBrightness(); setInterval(updateBrightness, 2000);";
  html += "function displayImage() {";
  html += "  fetch('/display-image').then(r => r.text()).then(msg => alert(msg));";
  html += "}";
  html += "function updateWiFiStatus() {";
  html += "  fetch('/api/wifi-status').then(r => r.json()).then(data => {";
  html += "    document.getElementById('signalStrength').textContent = data.rssi + ' dBm';";
  html += "  }).catch(e => console.log('WiFi status update failed'));";
  html += "}";
  html += "setInterval(updateWiFiStatus, 5000);"; // 每5秒更新WiFi状态
  html += "</script>";
  
  html += "<div class='control'><h3>🔄 显示翻转</h3>";
  html += "<button class='btn-primary' onclick=\"fetch('/flip?enable=true')\">启用水平翻转</button>";
  html += "<button class='btn-danger' onclick=\"fetch('/flip?enable=false')\">禁用水平翻转</button>";
  html += "</div>";
  
  html += "<div class='control'><h3>🖼️ 图像上传</h3>";
  html += "<button class='btn-primary' onclick=\"window.location.href='/upload'\">上传PNG图像</button>";
  if (hasUploadedImage) {
    html += "<button class='btn-success' onclick=\"displayImage()\" style='margin-left:10px;'>显示上传的图像</button>";
  }
  html += "<button class='btn-warning' onclick=\"window.location.href='/upload-bin'\" style='margin-left:10px;'>上传BIN(原始灰度)</button>";
  html += "</div>";

  // 显示电源
  html += "<div class='control'><h3>🖥️ 屏幕电源</h3>";
  html += "<button class='btn-primary' onclick=\"fetch('/display-power?on=1')\">开启显示</button>";
  html += "<button class='btn-danger' onclick=\"fetch('/display-power?on=0')\">关闭显示</button>";
  html += "</div>";
  
  html += "<div class='control'><h3>📊 状态信息</h3>";
  html += "<button class='btn-primary' onclick=\"window.location.href='/status'\">查看状态</button>";
  html += "</div>";
  
  html += "</div></body></html>";
  
  server.send(200, "text/html", html);
}

void handleBrightness() {
  String level = server.arg("level");
  String value = server.arg("value");
  
  Serial.print("收到亮度调整请求: ");
  Serial.println(level.length()? level : value);
  
  if (value.length()) {
    int v = value.toInt();
    if (v < 0) v = 0; if (v > 2500) v = 2500;
    setBrightness((u16)v);
    server.send(200, "text/plain", String("亮度设置为 ") + v);
    return;
  } else if (level == "low") {
    setBrightnessLow();
    Serial.println("执行亮度调整: 低 (800)");
    server.send(200, "text/plain", "亮度设置为低 (800)");
  } else if (level == "medium") {
    setBrightnessMedium();
    Serial.println("执行亮度调整: 中 (1600)");
    server.send(200, "text/plain", "亮度设置为中 (1600)");
  } else if (level == "high") {
    setBrightnessHigh();
    Serial.println("执行亮度调整: 高 (2500)");
    server.send(200, "text/plain", "亮度设置为高 (2500)");
  } else {
    Serial.println("无效的亮度参数: " + level);
    server.send(400, "text/plain", "无效的亮度参数");
  }
}

void handleFlip() {
  String enable = server.arg("enable");
  
  if (enable == "true") {
    setTextHorizontalFlip(true);
    server.send(200, "text/plain", "水平翻转已启用");
  } else if (enable == "false") {
    setTextHorizontalFlip(false);
    server.send(200, "text/plain", "水平翻转已禁用");
  } else {
    server.send(400, "text/plain", "无效的翻转参数");
  }
}

// 颜色反转控制
void handleInvert() {
  String enable = server.arg("enable");
  if (enable == "true") {
    invertEnabled = true;
    server.send(200, "text/plain", "invert on");
  } else if (enable == "false") {
    invertEnabled = false;
    server.send(200, "text/plain", "invert off");
  } else {
    server.send(400, "text/plain", "invalid param");
  }
}

// 开关显示电源
void handleDisplayPower() {
  String on = server.arg("on");
  if (on == "1") {
    send_cmd(SPI_DISPLAY_ENABLE);
    send_cmd(SPI_SYNC);
    server.send(200, "text/plain", "display on");
  } else if (on == "0") {
    send_cmd(SPI_DISPLAY_DISABLE);
    send_cmd(SPI_SYNC);
    server.send(200, "text/plain", "display off");
  } else {
    server.send(400, "text/plain", "invalid param");
  }
}

void handleStatus() {
  String html = "<!DOCTYPE html><html><head><meta charset='UTF-8'>";
  html += "<title>AR Device Status</title>";
  html += "<style>body{font-family:Arial;margin:40px;background:#f0f0f0;}";
  html += ".container{max-width:600px;margin:0 auto;background:white;padding:30px;border-radius:10px;box-shadow:0 2px 10px rgba(0,0,0,0.1);}";
  html += "h1{color:#333;text-align:center;}";
  html += ".status-item{margin:15px 0;padding:10px;background:#f8f9fa;border-left:4px solid #007bff;border-radius:4px;}";
  html += ".label{font-weight:bold;color:#495057;}";
  html += ".value{color:#28a745;margin-left:10px;}";
  html += ".refresh-btn{background:#007bff;color:white;padding:10px 20px;border:none;border-radius:5px;cursor:pointer;margin-top:20px;}";
  html += "</style></head><body>";
  html += "<div class='container'>";
  html += "<h1>📊 AR Device Status</h1>";
  
  html += "<div class='status-item'>";
  html += "<span class='label'>🌐 WiFi Network:</span>";
  html += "<span class='value'>" + String(wifi_ssid) + "</span>";
  html += "</div>";
  
  html += "<div class='status-item'>";
  html += "<span class='label'>🔗 IP Address:</span>";
  html += "<span class='value'>" + WiFi.localIP().toString() + "</span>";
  html += "</div>";
  
  html += "<div class='status-item'>";
  html += "<span class='label'>📶 Signal Strength:</span>";
  html += "<span class='value'>" + String(WiFi.RSSI()) + " dBm</span>";
  html += "</div>";
  
  html += "<div class='status-item'>";
  html += "<span class='label'>💡 Current Brightness:</span>";
  html += "<span class='value'>" + String(currentBrightness) + "</span>";
  html += "</div>";
  
  html += "<div class='status-item'>";
  html += "<span class='label'>🔄 Horizontal Flip:</span>";
  html += "<span class='value'>" + String(textFlipEnabled ? "Enabled" : "Disabled") + "</span>";
  html += "</div>";
  
  html += "<div class='status-item'>";
  html += "<span class='label'>⏱️ Uptime:</span>";
  html += "<span class='value'>" + String(millis() / 1000) + " seconds</span>";
  html += "</div>";
  
  html += "<div class='status-item'>";
  html += "<span class='label'>💾 Free RAM:</span>";
  html += "<span class='value'>" + String(ESP.getFreeHeap()) + " bytes</span>";
  html += "</div>";
  
  html += "<div class='status-item'>";
  html += "<span class='label'>💽 Flash Size:</span>";
  html += "<span class='value'>" + String(ESP.getFlashChipSize()) + " bytes</span>";
  html += "</div>";
  
  html += "<button class='refresh-btn' onclick='window.location.reload()'>🔄 Refresh</button>";
  html += "<button class='refresh-btn' onclick='window.location.href=\"/\"' style='margin-left:10px;background:#28a745;'>🏠 Home</button>";
  html += "</div></body></html>";
  
  server.send(200, "text/html", html);
}

void handleGetBrightness() {
  String json = "{";
  json += "\"current\": " + String(currentBrightness) + ",";
  json += "\"register\": " + String(rd_lum_reg()) + ",";
  json += "\"timestamp\": " + String(millis());
  json += "}";
  
  server.send(200, "application/json", json);
}

void handleGetWiFiStatus() {
  String json = "{";
  json += "\"ssid\": \"" + String(wifi_ssid) + "\",";
  json += "\"ip\": \"" + WiFi.localIP().toString() + "\",";
  json += "\"rssi\": " + String(WiFi.RSSI()) + ",";
  json += "\"connected\": " + String(WiFi.status() == WL_CONNECTED ? "true" : "false") + ",";
  json += "\"timestamp\": " + String(millis());
  json += "}";
  
  server.send(200, "application/json", json);
}

void handleUploadPage() {
  String html = "<!DOCTYPE html><html><head><meta charset='UTF-8'>";
  html += "<title>Upload PNG Image</title>";
  html += "<style>body{font-family:Arial;margin:40px;background:#f0f0f0;}";
  html += ".container{max-width:600px;margin:0 auto;background:white;padding:30px;border-radius:10px;box-shadow:0 2px 10px rgba(0,0,0,0.1);}";
  html += "h1{color:#333;text-align:center;}";
  html += ".upload-area{border:2px dashed #007bff;border-radius:10px;padding:40px;text-align:center;margin:20px 0;}";
  html += "input[type=file]{margin:20px 0;}";
  html += ".btn{background:#007bff;color:white;padding:10px 20px;border:none;border-radius:5px;cursor:pointer;margin:10px;}";
  html += ".info{background:#e9f4ff;padding:15px;border-radius:5px;margin:15px 0;}";
  html += "</style></head><body>";
  html += "<div class='container'>";
  html += "<h1>🖼️ PNG Image Upload</h1>";
  
  html += "<div class='info'>";
  html += "<strong>支持格式:</strong> PNG图像<br>";
  html += "<strong>建议尺寸:</strong> 640x480 或更小<br>";
  html += "<strong>自动处理:</strong> 灰度转换、缩放、4bit量化";
  html += "</div>";
  
  html += "<form method='POST' action='/upload' enctype='multipart/form-data'>";
  html += "<div class='upload-area'>";
  html += "<h3>📁 选择PNG文件</h3>";
  html += "<input type='file' name='image' accept='.png' required>";
  html += "<br><button type='submit' class='btn'>⬆️ 上传并转换</button>";
  html += "</div></form>";
  
  html += "<button class='btn' onclick='window.location.href=\"/\"' style='background:#28a745;'>🏠 返回主页</button>";
  html += "</div></body></html>";
  
  server.send(200, "text/html", html);
}

void handleUploadBinPage() {
  String html = "<!DOCTYPE html><html><head><meta charset='UTF-8'>";
  html += "<title>Upload BIN</title>";
  html += "<style>body{font-family:Arial;margin:40px;background:#f0f0f0;}";
  html += ".container{max-width:600px;margin:0 auto;background:white;padding:30px;border-radius:10px;box-shadow:0 2px 10px rgba(0,0,0,0.1);}";
  html += "h1{color:#333;text-align:center;}";
  html += ".btn{background:#007bff;color:white;padding:10px 20px;border:none;border-radius:5px;cursor:pointer;margin:10px;}";
  html += "input{padding:8px;margin:5px;width:100px;}";
  html += "</style></head><body>";
  html += "<div class='container'>";
  html += "<h1>📦 Upload Raw BIN (0..15 per pixel)</h1>";
  html += "<div class='info'>若不填写宽高，服务器将自动根据文件大小识别：";
  html += "307200=640x480, 76800=320x240, 19200=160x120, 58752=288x204</div>";
  html += "<form method='POST' action='/upload-bin' enctype='multipart/form-data'>";
  html += "宽: <input type='number' name='w' placeholder='可选'> 高: <input type='number' name='h' placeholder='可选'><br>";
  html += "<input type='file' name='file' accept='.bin' required>";
  html += "<br><button type='submit' class='btn'>⬆️ 上传BIN</button>";
  html += "</form>";
  html += "<button class='btn' onclick='window.location.href=\"/\"' style='background:#28a745;'>🏠 返回主页</button>";
  html += "</div></body></html>";
  server.send(200, "text/html", html);
}

void handleUploadBin() {
  HTTPUpload& upload = server.upload();
  static File fsOut;
  static size_t rec = 0;
  static int w = 0, h = 0;

  // (FS streaming mode; no RAM growth allocator needed)

  if (upload.status == UPLOAD_FILE_START) {
    // 可选表单字段
    w = server.hasArg("w") ? server.arg("w").toInt() : 0;
    h = server.hasArg("h") ? server.arg("h").toInt() : 0;
    if (uploadedImageData) { free(uploadedImageData); uploadedImageData = nullptr; }
    hasUploadedImage = false;
    hasUploadedBinFS = false;
    fsBinW = fsBinH = 0;
    rec = 0;
    SPIFFS.begin(true);
    if (SPIFFS.exists(fsBinPath)) SPIFFS.remove(fsBinPath);
    fsOut = SPIFFS.open(fsBinPath, FILE_WRITE);
    if (!fsOut) {
      server.send(500, "text/plain", "FS open failed");
      return;
    }
    Serial.printf("BIN start w=%d h=%d (optional)\n", w, h);
  } else if (upload.status == UPLOAD_FILE_WRITE) {
    if (fsOut) {
      fsOut.write(upload.buf, upload.currentSize);
      rec += upload.currentSize;
    }
  } else if (upload.status == UPLOAD_FILE_END) {
    Serial.printf("BIN end rec=%u\n", (unsigned)rec);
    // 若未提供w/h，尝试按常用尺寸推断
    if (w <= 0 || h <= 0) {
      if      (rec == 640u * 480u) { w = 640; h = 480; }
      else if (rec == 320u * 240u) { w = 320; h = 240; }
      else if (rec == 160u * 120u) { w = 160; h = 120; }
      else if (rec == 288u * 204u) { w = 288; h = 204; }
    }
    if (fsOut) fsOut.close();
    if (w <= 0 || h <= 0 || rec != (size_t)w * (size_t)h) {
      if (SPIFFS.exists(fsBinPath)) SPIFFS.remove(fsBinPath);
      server.send(400, "text/plain", "Unable to infer w/h; please provide width & height");
      return;
    }
    // 采用FS存储的BIN作为源，避免堆内存占用
    fsBinW = (u16)w;
    fsBinH = (u16)h;
    hasUploadedBinFS = true;
    server.send(200, "text/plain", "BIN uploaded to FS and ready");
  } else if (upload.status == UPLOAD_FILE_ABORTED) {
    if (fsOut) fsOut.close();
    if (SPIFFS.exists(fsBinPath)) SPIFFS.remove(fsBinPath);
    hasUploadedImage = false;
  }
}
void handleUpload() {
  HTTPUpload& upload = server.upload();
  static uint8_t* tempBuffer = nullptr;
  static size_t tempBufferSize = 0;
  static size_t tempReceived = 0;
  
  if (upload.status == UPLOAD_FILE_START) {
    Serial.printf("Upload Start: %s\n", upload.filename.c_str());
    
    // 清理之前的数据
    if (uploadedImageData) {
      free(uploadedImageData);
      uploadedImageData = nullptr;
    }
    if (uploadedPngData) {
      free(uploadedPngData);
      uploadedPngData = nullptr;
    }
    if (tempBuffer) {
      free(tempBuffer);
      tempBuffer = nullptr;
    }
    
    hasUploadedImage = false;
    uploadedPngSize = 0;
    tempReceived = 0;
    
    // 分配临时缓冲区存储PNG数据 (最大50KB)
    tempBufferSize = 50 * 1024;
    tempBuffer = (uint8_t*)malloc(tempBufferSize);
    if (!tempBuffer) {
      tempBufferSize = 20 * 1024;
      tempBuffer = (uint8_t*)malloc(tempBufferSize);
    }
    
    Serial.printf("Free heap: %u bytes, temp buffer: %u bytes\n", 
                  ESP.getFreeHeap(), tempBufferSize);
    
  } else if (upload.status == UPLOAD_FILE_WRITE) {
    // 存储PNG数据块
    if (upload.currentSize > 0 && tempBuffer) {
      if (tempReceived + upload.currentSize <= tempBufferSize) {
        memcpy(tempBuffer + tempReceived, upload.buf, upload.currentSize);
        tempReceived += upload.currentSize;
        Serial.printf("Upload Write: %u bytes (total: %u)\n", 
                      upload.currentSize, tempReceived);
      } else {
        Serial.println("Temp buffer overflow!");
      }
    }
    
  } else if (upload.status == UPLOAD_FILE_END) {
    Serial.printf("Upload End: %u bytes received\n", tempReceived);
    
    if (tempReceived > 0 && tempBuffer) {
      // 保存PNG数据
      uploadedPngData = (uint8_t*)malloc(tempReceived);
      if (uploadedPngData) {
        memcpy(uploadedPngData, tempBuffer, tempReceived);
        uploadedPngSize = tempReceived;
        
        // 先清理临时缓冲区，释放大块内存，避免堆碎片影响后续图像内存分配
        if (tempBuffer) {
          free(tempBuffer);
          tempBuffer = nullptr;
        }

        // 处理PNG并创建图像（此时可用内存更充足）
        Serial.println("Processing uploaded PNG...");
        processPngToImage();
        
        // 验证图像状态
        Serial.printf("After processing - hasUploadedImage: %s, data: %p\n",
                      hasUploadedImage ? "true" : "false", uploadedImageData);
        
        String response = "<!DOCTYPE html><html><head><meta charset='UTF-8'>";
        response += "<title>Upload Success</title>";
        response += "<style>body{font-family:Arial;margin:40px;text-align:center;}";
        response += ".success{color:#28a745;font-size:24px;margin:20px;}";
        response += ".btn{background:#007bff;color:white;padding:10px 20px;border:none;border-radius:5px;text-decoration:none;margin:10px;}";
        response += "</style></head><body>";
        response += "<div class='success'>✅ 图像上传成功!</div>";
        response += "<p>文件大小: " + String(tempReceived) + " bytes</p>";
        response += "<p>图像已处理为适合AR眼镜的格式</p>";
        response += "<a href='/display-image' class='btn'>🖥️ 立即显示</a>";
        response += "<a href='/' class='btn' style='background:#28a745;'>🏠 返回主页</a>";
        response += "</body></html>";
        
        server.send(200, "text/html", response);
      } else {
        Serial.println("Failed to save PNG data");
        if (tempBuffer) free(tempBuffer);
        server.send(500, "text/plain", "Failed to save uploaded data");
      }
    } else {
      if (tempBuffer) free(tempBuffer);
      server.send(400, "text/plain", "Upload failed - no data received");
    }
  } else if (upload.status == UPLOAD_FILE_ABORTED) {
    Serial.println("Upload aborted");
    if (tempBuffer) {
      free(tempBuffer);
      tempBuffer = nullptr;
    }
    hasUploadedImage = false;
  }
}

// 创建测试上传图像（占位符函数）
void createTestUploadedImage() {
  Serial.printf("Creating test image... Free heap: %u bytes\n", ESP.getFreeHeap());
  
  // 使用更小的图像尺寸以适应内存限制
  uploadedImageWidth = 320;
  uploadedImageHeight = 240;
  
  size_t imageSize = uploadedImageWidth * uploadedImageHeight;
  Serial.printf("Attempting to allocate %u bytes for image\n", imageSize);
  
  uploadedImageData = (u8*)malloc(imageSize);
  
  if (uploadedImageData) {
    Serial.println("Image memory allocated successfully");
    
    // 创建一个简单的测试图案
    for (u16 y = 0; y < uploadedImageHeight; y++) {
      for (u16 x = 0; x < uploadedImageWidth; x++) {
        u8 value;
        // 创建一个圆形图案
        int centerX = uploadedImageWidth / 2;
        int centerY = uploadedImageHeight / 2;
        int dx = x - centerX;
        int dy = y - centerY;
        int distance = dx * dx + dy * dy;
        int radius = 60;
        
        if (distance < radius * radius) {
          value = 15; // 圆形内部 - 亮
        } else if ((x / 20 + y / 20) % 2 == 0) {
          value = 8;  // 外部棋盘格 - 中等
        } else {
          value = 2;  // 外部棋盘格 - 暗
        }
        uploadedImageData[y * uploadedImageWidth + x] = value;
      }
    }
    hasUploadedImage = true;
    Serial.printf("测试图像已创建 (%ux%u) - hasUploadedImage: %s, data: %p\n", 
                  uploadedImageWidth, uploadedImageHeight,
                  hasUploadedImage ? "true" : "false", uploadedImageData);
  } else {
    Serial.println("Failed to allocate image memory! Trying even smaller size...");
    
    // 尝试更小的尺寸
    uploadedImageWidth = 160;
    uploadedImageHeight = 120;
    imageSize = uploadedImageWidth * uploadedImageHeight;
    
    Serial.printf("Trying smaller allocation: %u bytes\n", imageSize);
    uploadedImageData = (u8*)malloc(imageSize);
    
    if (uploadedImageData) {
      // 创建简单的测试图案
      for (u16 y = 0; y < uploadedImageHeight; y++) {
        for (u16 x = 0; x < uploadedImageWidth; x++) {
          u8 value = ((x / 10 + y / 10) % 2 == 0) ? 15 : 3;
          uploadedImageData[y * uploadedImageWidth + x] = value;
        }
      }
      hasUploadedImage = true;
      Serial.printf("小尺寸测试图像已创建 (%ux%u)\n", uploadedImageWidth, uploadedImageHeight);
    } else {
      Serial.println("Failed to allocate even smaller image memory!");
      hasUploadedImage = false;
    }
  }
}

// 简化的PNG处理函数
void processPngToImage() {
  Serial.printf("Starting PNG processing... Free heap: %u\n", ESP.getFreeHeap());
  
  if (!uploadedPngData || uploadedPngSize == 0) {
    Serial.println("No PNG data - creating fallback image");
    createTestUploadedImage();
    return;
  }
  
  Serial.printf("Processing PNG: %u bytes\n", uploadedPngSize);
  
  // 直接使用小尺寸，确保内存足够
  uploadedImageWidth = 160;
  uploadedImageHeight = 120;
  
  size_t imageSize = uploadedImageWidth * uploadedImageHeight;
  Serial.printf("Allocating %u bytes for image\n", imageSize);
  
  uploadedImageData = (u8*)malloc(imageSize);
  
  if (!uploadedImageData) {
    Serial.println("Allocation failed - trying test image");
    createTestUploadedImage();
    return;
  }
  
  Serial.println("Creating pattern from PNG data...");
  
  // 使用PNG数据的简单散列创建图案
  for (u16 y = 0; y < uploadedImageHeight; y++) {
    for (u16 x = 0; x < uploadedImageWidth; x++) {
      // 使用PNG数据创建独特图案
      size_t dataIndex = ((y * uploadedImageWidth + x) * 7) % uploadedPngSize;
      u8 pngByte = uploadedPngData[dataIndex];
      
      // 简单映射到4bit灰度
      u8 value = pngByte >> 4; // 取高4位
      if (value == 0) value = 1; // 避免全黑
      
      uploadedImageData[y * uploadedImageWidth + x] = value;
    }
  }
  
  hasUploadedImage = true;
  Serial.printf("✅ PNG processed successfully (%ux%u) - hasImage: %s, data: %p\n", 
                uploadedImageWidth, uploadedImageHeight,
                hasUploadedImage ? "true" : "false", uploadedImageData);
}

void handleDisplayImage() {
  Serial.printf("Display image request - hasUploadedImage: %s, uploadedImageData: %p\n", 
                hasUploadedImage ? "true" : "false", uploadedImageData);
  
  if (!hasUploadedImage || !uploadedImageData) {
    String errorMsg = "No image uploaded - hasImage: ";
    errorMsg += hasUploadedImage ? "true" : "false";
    errorMsg += ", data: ";
    errorMsg += uploadedImageData ? "valid" : "null";
    
    server.send(400, "text/plain", errorMsg);
    Serial.println(errorMsg);
    return;
  }
  
  Serial.println("开始显示上传的图像...");
  displayUploadedImage();
  
  server.send(200, "text/plain", "Image displayed successfully!");
}

void displayUploadedImage() {
  if (!hasUploadedImage && !hasUploadedBinFS) {
    Serial.println("错误: 没有上传的图像数据");
    return;
  }
  
  const u16 panelWidth = 640;
  const u16 panelHeight = 480;
  const u16 chunkRows = 60;
  const u16 bytesPerRow = panelWidth / 2;
  
  u16 rowStart = 0;
  while (rowStart < panelHeight) {
    u16 rowsNow = (panelHeight - rowStart) > chunkRows ? chunkRows : (panelHeight - rowStart);
    
    // 清空缓冲区
    memset(image, 0, (size_t)bytesPerRow * (size_t)rowsNow);
    
    if (hasUploadedBinFS) {
      // 从FS按行读取BIN并打包
      File f = SPIFFS.open(fsBinPath, FILE_READ);
      if (!f) { Serial.println("FS open failed"); return; }
      // 读取对应源行范围到一个小缓冲
      const u32 srcStride = (u32)fsBinW; // 每行字节
      const u32 startOff = (u32)rowStart * srcStride * (u32)fsBinH / (u32)panelHeight; // 先粗略，实际pack函数会重新采样
      // 简化：一次性读 rowsNow 对应的近似字节（足够）
      const u32 approxRows = rowsNow * fsBinH / panelHeight + 2;
      const u32 readBytes = approxRows * srcStride;
      static u8 lineBuf[640*64]; // 约40KB上限
      f.seek(startOff, SeekSet);
      size_t got = f.read(lineBuf, readBytes > sizeof(lineBuf) ? sizeof(lineBuf) : readBytes);
      f.close();
      // 使用pack函数对 lineBuf 进行缩放打包（源宽=fsBinW，高度近似）
      packPngScaledRowsToPanel(image, panelWidth, panelHeight,
                               lineBuf, fsBinW, fsBinH,
                               rowStart, rowsNow, invertEnabled);
    } else {
      // 打包内存中的图像
      packPngScaledRowsToPanel(image, panelWidth, panelHeight, 
                               uploadedImageData, uploadedImageWidth, uploadedImageHeight, 
                               rowStart, rowsNow, invertEnabled);
    }
    
    u32 lenBytes = (u32)bytesPerRow * (u32)rowsNow;
    display_image(image, lenBytes, 0, (u16)rowStart);
    rowStart += rowsNow;
  }
  
  Serial.println("上传图像显示完成");
}

void setupWebServer() {
  server.on("/", handleRoot);
  server.on("/brightness", handleBrightness);
  server.on("/flip", handleFlip);
  server.on("/display-power", handleDisplayPower);
  server.on("/status", handleStatus);
  server.on("/api/brightness", handleGetBrightness);
  server.on("/invert", handleInvert);
  server.on("/api/wifi-status", handleGetWiFiStatus);
  server.on("/upload", HTTP_GET, handleUploadPage);
  server.on("/upload", HTTP_POST, []() { server.send(200); }, handleUpload);
  server.on("/upload-bin", HTTP_GET, handleUploadBinPage);
  server.on("/upload-bin", HTTP_POST, []() { server.send(200); }, handleUploadBin);
  server.on("/display-image", handleDisplayImage);
  
  server.begin();
  Serial.println("Web服务器启动成功!");
  Serial.print("访问地址: http://");
  Serial.println(WiFi.localIP());
}

// 生成带透明背景的绿色圆形到帧缓冲（4bit灰度，每字节两个像素）
void renderGreenCircle(u8 *dest, u16 widthPixels, u16 heightRows, u8 grayLevel) {
  u8 level = (grayLevel > 15) ? 15 : grayLevel;
  u16 bytesPerRow = widthPixels / 2; // 每字节两个像素
  float cx = (float)widthPixels * 0.5f;
  float cy = (float)heightRows * 0.5f;
  float radius = (heightRows < widthPixels ? (float)heightRows : (float)widthPixels) * 0.35f;
  float r2 = radius * radius;

  for (u16 y = 0; y < heightRows; y++) {
    for (u16 x = 0; x < widthPixels; x += 2) {
      float dx0 = (float)x - cx;
      float dy0 = (float)y - cy;
      float dx1 = (float)(x + 1) - cx;
      float dy1 = dy0;
      bool on0 = (dx0 * dx0 + dy0 * dy0) <= r2;
      bool on1 = (dx1 * dx1 + dy1 * dy1) <= r2;
      u8 hi = on0 ? level : 0;
      u8 lo = on1 ? level : 0;
      dest[y * bytesPerRow + (x >> 1)] = (hi << 4) | lo;
    }
  }
}

// 将每像素1字节(0..15)的PNG行块打包为面板4bit/像素缓冲（每字节2像素，行宽固定destWidth=640）
void packPngRowsToPanel(u8 *dest, u16 destWidth, const u8 *src, u16 srcWidth, u16 rowStart, u16 rows) {
  u16 bytesPerRow = destWidth / 2;
  for (u16 ry = 0; ry < rows; ry++) {
    u16 y = rowStart + ry;
    const u8 *srcRow = src + (u32)y * (u32)srcWidth;
    u8 *dstRow = dest + (u32)ry * (u32)bytesPerRow;
    for (u16 x = 0; x < destWidth; x += 2) {
      u8 g0 = 0, g1 = 0;
      if (x < srcWidth) {
        u8 v0 = srcRow[x] & 0x0F;
        g0 = (u8)(0x0F - v0); // invert: 0 -> 15 (bright), 15 -> 0 (black)
      }
      if ((x + 1) < srcWidth) {
        u8 v1 = srcRow[x + 1] & 0x0F;
        g1 = (u8)(0x0F - v1);
      }
      dstRow[x >> 1] = (g0 << 4) | g1;
    }
  }
}

// 将PNG缩放到屏幕尺寸（最近邻），并按行块打包（4bit/像素，0..15）。
void packPngScaledRowsToPanel(u8 *dest,
                              u16 destWidth,
                              u16 destHeight,
                              const u8 *src,
                              u16 srcWidth,
                              u16 srcHeight,
                              u16 rowStart,
                              u16 rows,
                              bool invert) {
  u16 bytesPerRow = destWidth / 2;
  for (u16 ry = 0; ry < rows; ry++) {
    u16 yDst = rowStart + ry;
    u32 ySrc = ((u32)yDst * (u32)srcHeight) / (u32)destHeight;
    if (ySrc >= srcHeight) ySrc = srcHeight - 1;
    const u8 *srcRow = src + (u32)ySrc * (u32)srcWidth;
    u8 *dstRow = dest + (u32)ry * (u32)bytesPerRow;
    for (u16 x = 0; x < destWidth; x += 2) {
      u32 x0Src = ((u32)x * (u32)srcWidth) / (u32)destWidth;
      if (x0Src >= srcWidth) x0Src = srcWidth - 1;
      u32 x1Src = ((u32)(x + 1) * (u32)srcWidth) / (u32)destWidth;
      if (x1Src >= srcWidth) x1Src = srcWidth - 1;
      u8 v0 = srcRow[x0Src] & 0x0F;
      u8 v1 = srcRow[x1Src] & 0x0F;
      if (invert) {
        v0 = (u8)(0x0F - v0);
        v1 = (u8)(0x0F - v1);
      }
      dstRow[x >> 1] = (v0 << 4) | v1;
    }
  }
}

// u32 ID=read_id();
void setup()
{

  // 初始化引脚
  //JBD_init();
  // 配置SPI设置
  SPI.begin(SPI_CLK, SPI_MISO, SPI_MOSI, SPI_CS);
  //SPI.begin();
  SPI.setBitOrder(MSBFIRST);           // 数据位顺序，最高有效位先传输
  SPI.setDataMode(SPI_MODE0);          // 时钟相位和极性，模式
  SPI.setClockDivider(SPI_CLOCK_DIV4); //
  pinMode(SPI_CS, OUTPUT);
  digitalWrite(SPI_CS, HIGH); // 默认禁用从设备
  Serial.begin(115200);
  Serial.println("AR-Ldc-Vision 初始化中...");
  delay_ms(10);
  //u32 ID = read_id();
  //u8 Stus = rd_status_reg(SPI_RD_STATUS_REG2);
  //u16 lum = rd_lum_reg();
  //send_cmd(SPI_SELF_TEST_ALL_ON);
  //send_cmd(SPI_SYNC);
  //get_temperature_sensor_data(0x26);
  //u8 elc = rd_cur_reg();
  //lum = rd_lum_reg();
  //u16 ofs=rd_offset_reg();
  //delay_ms(10);
  // 初始化面板
  panel_init();
  
  // 设置文本水平翻转 (true = 翻转, false = 正常)
  setTextHorizontalFlip(true);
  
  // 设置低亮度 (启动默认)
  setBrightnessLow(); 
  // setBrightness(800);  

  // 连接WiFi并启动Web服务器
  connectToWiFi();
  if (WiFi.status() == WL_CONNECTED) {
    setupWebServer();
  }  

  // 使用预处理后的本地图像（640x480）分块写入，避免缩放与反相
  const u16 panelWidth = 640;
  const u16 panelHeight = 480;
  const u16 chunkRows = 60; // 480/60=8整块，避免边界伪影
  const u16 bytesPerRow = panelWidth / 2;
  u16 rowStart = 0;
  while (rowStart < panelHeight) {
    u16 rowsNow = (panelHeight - rowStart) > chunkRows ? chunkRows : (panelHeight - rowStart);
    memset(image, 0, (size_t)bytesPerRow * (size_t)rowsNow);
    packPngScaledRowsToPanel(image, panelWidth, panelHeight,
                             group1_data, group1_width, group1_height,
                             rowStart, rowsNow, invertEnabled);
    u32 lenBytes = (u32)bytesPerRow * (u32)rowsNow;
    display_image(image, lenBytes, 0, (u16)rowStart);
    rowStart += rowsNow;
  }
}

void loop()
{
  // 处理Web服务器请求
  server.handleClient();

  // display_image(image, image_len);

  /*
  ============================
  亮度控制示例 - 可以在这里动态调整亮度
  ============================
  */
  // 示例: 动态亮度调整 (取消注释以启用)
  // static unsigned long lastBrightnessChange = 0;
  // if (millis() - lastBrightnessChange > 5000) { // 每5秒改变一次
  //   static bool lowBrightness = true;
  //   if (lowBrightness) {
  //     setBrightnessMedium();
  //   } else {
  //     setBrightnessLow();
  //   }
  //   lowBrightness = !lowBrightness;
  //   lastBrightnessChange = millis();
  // }

  // 监控当前设置 (可选 - 取消注释以在串口查看)
  // u8 elc = rd_cur_reg();
  // u16 lum = rd_lum_reg();
  // u16 ofs = rd_offset_reg();
  // delay(100);
  // MySerial_esp32.println("cosSerial test!!!");
  // MySerial_esp32.print("ID:");
  // MySerial_esp32.println(ID);
  // delay(100);
  // MySerial_esp32.print("电流:");
  // MySerial_esp32.println(elc);
  // delay(100);
  // MySerial_esp32.print("亮度:");
  // MySerial_esp32.println(lum);
  // delay(100);
  // MySerial_esp32.print("偏移:");
  // MySerial_esp32.println(ofs);
  // delay(500);
  /*
  ============================
  */
  // 发送数据
  // SPI.transfer(0x01); // 发送一个字节的数据
  /*
  ==========================================
  逻辑分析仪测试
  digitalWrite(PANELD2,HIGH);
  delay(500);
  digitalWrite(PANELD2,LOW);
  delay(500);
  ==========================================
  */
  // delay(100); // 等待0.1秒钟
}

