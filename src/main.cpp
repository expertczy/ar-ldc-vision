#include <Arduino.h>
#include <jbd013_api.h>
#include <SPI.h>
#include <driver/spi_master.h>
#include <HardwareSerial.h>
#include <string.h>
#include <WiFi.h>
#include <WebServer.h>
#include <FS.h>
#include <SPIFFS.h>
#include "../current_image.h"
// 引脚定义
//#define TFT_CLK 14
#define TFT_CS0 33
#define TFT_CS1 3
#define TFT_D0 37
#define TFT_D1 40
#define TFT_D2 23
#define TFT_D3 5
// SPI引脚
#define SPI_CLK 36  // SPI时钟引脚 3
#define SPI_MISO 37 // SPI MISO引脚  46
#define SPI_MOSI 35 // SPI MOSI引脚  42
#define SPI_CS 33  // SPI片选引脚 spi_wr_byte有Bug所以这条无效  这条要在hal_Driver改
// 串口映射
//HardwareSerial MySerial_esp32(1);
// 设置面板画面

uint8_t screenRow = 0x28;

u8 image[22480] = {};

u8 image1[10240] = {};
u8 image2[10240] = {};
u8 image3[10240] = {};
u8 image4[10240] = {};
u8 image5[10240] = {};
u8 image6[10240] = {};
u8 image7[10240] = {};
u8 image8[10240] = {};
u8 image9[10240] = {};
u8 image10[10240] = {};
u8 image11[10240] = {};
u8 image12[10240] = {};
u8 image13[10240] = {};
u8 image14[10240] = {};
u8 image15[10240] = {};
u8 image16[10240] = {};
u8 image17[10240] = {};
u8 image18[10240] = {};
u8 image19[10240] = {};
u8 image20[10240] = {};
u8 image21[10240] = {};
u8 image22[10240] = {};
u8 image23[10240] = {};
u8 image24[10240] = {};
u8 image25[10240] = {};
u8 image26[10240] = {};
u8 image27[10240] = {};
u8 image28[10240] = {};
u8 image29[10240] = {};
u8 image30[10240] = {};

u8 fontA[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
u8 fontB[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0xFF,0x00,0xFF,0xFF,0x00,0x00,0x00, 0x00,0xFF,0xFF,0x00,0x00,0xFF,0x00,0x00, 0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00, 0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00, 0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00, 0x00,0xFF,0xFF,0x00,0x00,0xFF,0x00,0x00, 0x00,0xFF,0x00,0xFF,0xFF,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};
u8 fontC[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0xFF,0xFF,0xFF,0x00,0x00, 0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00, 0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00, 0x00,0x00,0x00,0xFF,0xFF,0xFF,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
u8 fontD[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00, 0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x00, 0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00, 0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00, 0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00, 0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00, 0x00,0xFF,0x00,0x00,0x00,0xFF,0xFF,0x00, 0x00,0x00,0xFF,0xFF,0xFF,0x00,0xFF,0xFF, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};
u8 fontE[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};
u8 fontF[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};
u8 fontG[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,};
u8 fontH[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0xFF,0xFF,0xFF,0x00,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};
u8 fontI[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};
u8 fontJ[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,};
u8 fontK[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0xFF,0x00,0x00,0xFF,0xFF,0xFF,0x00, 0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00, 0x00,0xFF,0x00,0xFF,0x00,0x00,0x00,0x00, 0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00, 0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00, 0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00, 0xFF,0xFF,0xFF,0x00,0xFF,0xFF,0xFF,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};
u8 fontL[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00, 0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00, 0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};
u8 fontM[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00, 0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF, 0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF, 0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF, 0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF, 0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF, 0xFF,0xFF,0xFF,0x00,0xFF,0xFF,0x00,0xFF, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};
u8 fontN[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0xFF,0xFF,0xFF,0x00,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};
u8 fontO[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};
u8 fontP[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,
};
u8 fontQ[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,};
u8 fontR[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};
u8 fontS[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};
u8 fontT[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};
u8 fontU[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};
u8 fontV[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x00,0xFF,0xFF,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};
u8 fontW[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0xFF,0xFF,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0xFF,0x00,0x00,0xFF,0x00,0xFF,0x00,0x00,0xFF,0x00,0xFF,0xFF,0x00,0xFF,0x00,0x00,0xFF,0x00,0xFF,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};
u8 fontX[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x00,0xFF,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0xFF,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};
u8 fontY[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x00,0x00,0xFF,0xFF,0xFF,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,};
u8 fontZ[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};
u8 fontDot[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,};
u8 fontSpace[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};
u8 fontEndot[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};

u8 font1[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};

u8 font2[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};

u8 font3[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};

u8 font4[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};

u8 font5[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};

u8 font6[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};

u8 font7[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};

u8 font8[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};

u8 font9[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};

u8 font0[128] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};


int drawed = 0;

uint32_t image_len = 20480;

// 文本水平翻转控制变量
bool textFlipEnabled = false;

// 亮度控制变量 (默认为较低亮度)
u16 currentBrightness = 800;

// WiFi和Web服务器配置
const char* wifi_ssid = "Hyperoptic Fibre 93B3";
const char* wifi_password = "pebdriAnU3347Y";
WebServer server(80);  // HTTP端口80

// 图像颜色反转开关（true = 反转）
bool invertEnabled = false;

// 运行时图像路径与FS状态
static const char* kRuntimeImagePath = "/current_image.bin"; // 640x480, 1B/px, 低4位有效
static bool fsMounted = false;
static File uploadFile;
static size_t lastUploadedSize = 0;

// 函数声明
void JBD_init(void);
void drawLetter(char letter);
void drawString(const char text[], int len);
void setTextHorizontalFlip(bool enable);
void packPngScaledRowsToPanel(u8 *dest, u16 destWidth, u16 destHeight, const u8 *src, u16 srcWidth, u16 srcHeight, u16 rowStart, u16 rows, bool invert);
void refreshDisplay();
void refreshDisplayFromFS();
void setBrightness(u16 brightness);
void connectToWiFi();
void setupWebServer();
void handleRoot();
void handleBrightness();
void handleFlip();
void handleStatus();
void handleGetBrightness();
void handleGetInvertStatus();
void handleGetFlipStatus();
void handleGetWiFiStatus();
void handleInvert();
void handleDisplayPower();
void renderGreenCircle(u8 *dest, u16 widthPixels, u16 heightRows, u8 grayLevel);

// 运行时上传/应用/测试/下载/FS状态
void handleUploadData();
void handleUploadComplete();
void handleApply();
void handleGetRuntimeStatus();
void handleRuntimeDownload();
void handleFsStatus();
uint32_t crc32_update(uint32_t crc, const uint8_t *data, size_t len);
uint32_t computeFileCRC32(File &f);

// 配置引脚
void JBD_init(void)
{
  //pinMode(TFT_CLK, OUTPUT);
  pinMode(TFT_CS0, OUTPUT);
  pinMode(TFT_CS1, OUTPUT);
  pinMode(TFT_D0, OUTPUT);  // miso
  pinMode(TFT_D1, OUTPUT); // mosi
  pinMode(TFT_D2, OUTPUT);
  pinMode(TFT_D3, OUTPUT);

  digitalWrite(TFT_CS0,HIGH);
  digitalWrite(TFT_CS1,HIGH);
}

void drawLetter(char letter){
  int lenPerLetter = 8;
  int c_cursor = 0;
  int ret;
  int counter = 0;

  if(letter == 'a'){
    for(int i = 0; i < sizeof(fontA); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontA[i];
      counter++;
    }
    drawed++;
  }
  if(letter == 'b'){
    for(int i = 0; i < sizeof(fontB); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontB[i];
      counter++;
    }
    drawed++;
  }
  if(letter == 'c'){
    for(int i = 0; i < sizeof(fontC); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontC[i];
      counter++;
    }
    drawed++;
  }
  if(letter == 'd'){
    for(int i = 0; i < sizeof(fontD); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontD[i];
      counter++;
    }
    drawed++;
  }
  if(letter == 'e'){
    for(int i = 0; i < sizeof(fontE); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontE[i];
      counter++;
    }
    drawed++;
  }
  if(letter == 'f'){
    for(int i = 0; i < sizeof(fontF); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontF[i];
      counter++;
    }
    drawed++;
  }
  if(letter == 'g'){
    for(int i = 0; i < sizeof(fontG); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontG[i];
      counter++;
    }
    drawed++;
  }
  if(letter == 'h'){
    for(int i = 0; i < sizeof(fontH); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontH[i];
      counter++;
    }
    drawed++;
  }
  if(letter == 'i'){
    for(int i = 0; i < sizeof(fontI); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontI[i];
      counter++;
    }
    drawed++;
  }
  if(letter == 'j'){
    for(int i = 0; i < sizeof(fontJ); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontJ[i];
      counter++;
    }
    drawed++;
  }
  if(letter == 'k'){
    for(int i = 0; i < sizeof(fontK); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontK[i];
      counter++;
    }
    drawed++;
  }
  if(letter == 'l'){
    for(int i = 0; i < sizeof(fontL); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontL[i];
      counter++;
    }
    drawed++;
  }
  if(letter == 'm'){
    for(int i = 0; i < sizeof(fontM); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontM[i];
      counter++;
    }
    drawed++;
  }
  if(letter == 'n'){
    for(int i = 0; i < sizeof(fontN); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontN[i];
      counter++;
    }
    drawed++;
  }
  if(letter == 'o'){
    for(int i = 0; i < sizeof(fontO); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontO[i];
      counter++;
    }
    drawed++;
  }
  if(letter == 'p'){
    for(int i = 0; i < sizeof(fontP); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontP[i];
      counter++;
    }
    drawed++;
  }
  if(letter == 'q'){
    for(int i = 0; i < sizeof(fontQ); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontQ[i];
      counter++;
    }
    drawed++;
  }
  if(letter == 'r'){
    for(int i = 0; i < sizeof(fontR); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontR[i];
      counter++;
    }
    drawed++;
  }
  if(letter == 's'){
    for(int i = 0; i < sizeof(fontS); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontS[i];
      counter++;
    }
    drawed++;
  }
  if(letter == 't'){
    for(int i = 0; i < sizeof(fontT); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontT[i];
      counter++;
    }
    drawed++;
  }
  if(letter == 'u'){
    for(int i = 0; i < sizeof(fontU); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontU[i];
      counter++;
    }
    drawed++;
  }
  if(letter == 'v'){
    for(int i = 0; i < sizeof(fontV); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontV[i];
      counter++;
    }
    drawed++;
  }
  if(letter == 'w'){
    for(int i = 0; i < sizeof(fontW); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontW[i];
      counter++;
    }
    drawed++;
  }
  if(letter == 'x'){
    for(int i = 0; i < sizeof(fontX); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontX[i];
      counter++;
    }
    drawed++;
  }
  if(letter == 'y'){
    for(int i = 0; i < sizeof(fontY); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontY[i];
      counter++;
    }
    drawed++;
  }
  if(letter == 'z'){
    for(int i = 0; i < sizeof(fontZ); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontZ[i];
      counter++;
    }
    drawed++;
  }
  if(letter == ','){
    for(int i = 0; i < sizeof(fontDot); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontDot[i];
      counter++;
    }
    drawed++;
  }
  if(letter == '.'){
    for(int i = 0; i < sizeof(fontEndot); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontEndot[i];
      counter++;
    }
    drawed++;
  }
  if(letter == ' '){
    for(int i = 0; i < sizeof(fontSpace); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = fontSpace[i];
      counter++;
    }
    drawed++;
  }
  if(letter == '0'){
    for(int i = 0; i < sizeof(font0); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = font0[i];
      counter++;
    }
    drawed++;
  }
  if(letter == '1'){
    for(int i = 0; i < sizeof(font1); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = font1[i];
      counter++;
    }
    drawed++;
  }
  if(letter == '2'){
    for(int i = 0; i < sizeof(font2); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = font2[i];
      counter++;
    }
    drawed++;
  }
  if(letter == '3'){
    for(int i = 0; i < sizeof(font3); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = font3[i];
      counter++;
    }
    drawed++;
  }
  if(letter == '4'){
    for(int i = 0; i < sizeof(font4); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = font4[i];
      counter++;
    }
    drawed++;
  }
  if(letter == '5'){
    for(int i = 0; i < sizeof(font5); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = font5[i];
      counter++;
    }
    drawed++;
  }
  if(letter == '6'){
    for(int i = 0; i < sizeof(font6); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = font6[i];
      counter++;
    }
    drawed++;
  }
  if(letter == '7'){
    for(int i = 0; i < sizeof(font7); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = font7[i];
      counter++;
    }
    drawed++;
  }
  if(letter == '8'){
    for(int i = 0; i < sizeof(font8); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = font8[i];
      counter++;
    }
    drawed++;
  }
  if(letter == '9'){
    for(int i = 0; i < sizeof(font9); i++){
      if( counter == 8){
        counter = 0;
        c_cursor++;
      }
      image[drawed*lenPerLetter+c_cursor*640+counter] = font9[i];
      counter++;
    }
    drawed++;
  }
}

void drawString(const char text[],int len){
  for (int i=0; i<len; i++) {
      char character = text[i];
      Serial.write(character);
      Serial.write('\r');
      Serial.write('\n');
      drawLetter(character);
  }
}

// 设置文本水平翻转
void setTextHorizontalFlip(bool enable) {
  textFlipEnabled = enable;
  if (enable) {
    set_mirror_mode(1); // Mirror left and right only
  } else {
    set_mirror_mode(0); // Normal display
  }
}

// 设置亮度 (通用函数)
// 亮度范围取决于刷新频率:
// 25Hz: 0-21331, 50Hz: 0-10664, 75Hz: 0-7109, 100Hz: 0-5331
// 125Hz: 0-4264, 150Hz: 0-3366, 175Hz: 0-2907, 200Hz: 0-2558
void setBrightness(u16 brightness) {
  Serial.print("设置亮度: ");
  Serial.print(brightness);
  Serial.print(" (当前: ");
  Serial.print(currentBrightness);
  Serial.println(")");
  
  // 启用状态寄存器写入
  send_cmd(SPI_WR_ENABLE);
  delay_ms(1);
  
  currentBrightness = brightness;
  wr_lum_reg(brightness);
  delay_ms(10); // 给硬件时间处理命令
  
  // 重新启用显示并同步（强制刷新亮度）
  send_cmd(SPI_DISPLAY_ENABLE);
  delay_ms(1);
  send_cmd(SPI_SYNC);
  delay_ms(1);
  
  // 读取回寄存器确认
  u16 readBack = rd_lum_reg();
  Serial.print("读取回的亮度值: ");
  Serial.println(readBack);
  Serial.println("亮度已设置并强制刷新显示");
}



// WiFi连接函数
void connectToWiFi() {
  Serial.println("正在连接WiFi...");
  WiFi.begin(wifi_ssid, wifi_password);
  
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 30) {
    delay(1000);
    Serial.print(".");
    attempts++;
  }
  
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println();
    Serial.println("WiFi连接成功!");
    Serial.print("IP地址: ");
    Serial.println(WiFi.localIP());
    Serial.print("端口: 80");
    Serial.println();
  } else {
    Serial.println("WiFi连接失败!");
  }
}

// Web服务器路由处理
void handleRoot() {
  String html = "<!DOCTYPE html><html><head><meta charset='UTF-8'>";
  html += "<title>AR眼镜控制面板</title>";
  html += "<style>body{font-family:Arial;margin:40px;background:#f0f0f0;}";
  html += ".container{max-width:600px;margin:0 auto;background:white;padding:30px;border-radius:10px;box-shadow:0 2px 10px rgba(0,0,0,0.1);}";
  html += "h1{color:#333;text-align:center;}";
  html += ".control{margin:20px 0;padding:15px;border:1px solid #ddd;border-radius:5px;}";
  html += "button{padding:10px 20px;margin:5px;border:none;border-radius:5px;cursor:pointer;font-size:16px;}";
  html += ".btn-primary{background:#007bff;color:white;}";
  html += ".btn-success{background:#28a745;color:white;}";
  html += ".btn-warning{background:#ffc107;color:black;}";
  html += ".btn-danger{background:#dc3545;color:white;}";
  html += "</style></head><body>";
  html += "<div class='container'>";
  html += "<h1>🥽 AR眼镜控制面板</h1>";
  
  // WiFi状态显示
  html += "<div class='control' style='background:#e8f5e8;border-left:4px solid #28a745;'>";
  html += "<h3>📡 WiFi状态</h3>";
  html += "<div style='display:flex;justify-content:space-between;align-items:center;'>";
  html += "<div>";
  html += "<strong>网络:</strong> " + String(wifi_ssid) + "<br>";
  html += "<strong>IP地址:</strong> <span id='ipAddress'>" + WiFi.localIP().toString() + "</span><br>";
  html += "<strong>信号强度:</strong> <span id='signalStrength'>" + String(WiFi.RSSI()) + " dBm</span>";
  html += "</div>";
  html += "<div style='font-size:24px;color:#28a745;'>📶</div>";
  html += "</div>";
  html += "</div>";
  
  html += "<div class='control'><h3>💡 亮度控制</h3>";
  html += "<div style='margin-bottom:15px;'>当前亮度: <span id='currentBrightness' style='font-weight:bold;color:#007bff;'>--</span></div>";
  html += "<div style='display:flex;align-items:center;gap:8px;margin-bottom:10px;'>";
  html += "<input id='brightnessInput' type='number' min='0' max='65535' step='1' placeholder='0-65535' style='width:150px;padding:8px;font-size:14px;'>";
  html += "<button class='btn-primary' onclick=\"setBrightnessValue()\" style='padding:8px 15px;'>设置亮度</button>";
  html += "</div>";
  html += "<div style='font-size:12px;color:#666;margin-top:5px;'>建议范围: 20-2000，最大值: 65535</div>";
  html += "</div>";

  // 颜色反转
  html += "<div class='control'><h3>🎨 颜色反转</h3>";
  html += "<div style='margin-bottom:10px;'>当前状态: <span id='invertStatus' style='font-weight:bold;color:#007bff;'>--</span></div>";
  html += "<button class='btn-primary' onclick=\"toggleInvert(true)\">启用反转</button>";
  html += "<button class='btn-danger' onclick=\"toggleInvert(false)\">禁用反转</button>";
  html += "</div>";
  
  html += "<script>";
  html += "function setBrightnessValue() {";
  html += "  const el=document.getElementById('brightnessInput');";
  html += "  let v=parseInt(el.value||'0'); if(isNaN(v)) v=0; if(v<0) v=0; if(v>65535) v=65535;";
  html += "  if(v>2000) { if(!confirm('亮度值较高 (' + v + ')，可能导致显示器过热。确定要设置吗？')) return; }";
  html += "  fetch('/brightness?value=' + v).then(() => updateBrightness());";
  html += "}";
  html += "function updateBrightness() {";
  html += "  fetch('/api/brightness').then(r => r.json()).then(data => {";
  html += "    document.getElementById('currentBrightness').textContent = data.current + ' (reg: ' + data.register + ')';";
  html += "  });";
  html += "}";
  html += "function toggleInvert(enable) {";
  html += "  fetch('/invert?enable=' + enable).then(() => updateInvertStatus());";
  html += "}";
  html += "function updateInvertStatus() {";
  html += "  fetch('/api/invert-status').then(r => r.json()).then(data => {";
  html += "    document.getElementById('invertStatus').textContent = data.status;";
  html += "  });";
  html += "}";
  html += "function toggleFlip(enable) {";
  html += "  fetch('/flip?enable=' + enable).then(() => updateFlipStatus());";
  html += "}";
  html += "function updateFlipStatus() {";
  html += "  fetch('/api/flip-status').then(r => r.json()).then(data => {";
  html += "    document.getElementById('flipStatus').textContent = data.status;";
  html += "  });";
  html += "}";

  html += "updateBrightness(); updateInvertStatus(); updateFlipStatus();";
  html += "setInterval(updateBrightness, 2000); setInterval(updateInvertStatus, 2000); setInterval(updateFlipStatus, 2000);";
  html += "function displayImage() {";
  html += "  fetch('/display-image').then(r => r.text()).then(msg => alert(msg));";
  html += "}";
  html += "function updateWiFiStatus() {";
  html += "  fetch('/api/wifi-status').then(r => r.json()).then(data => {";
  html += "    document.getElementById('signalStrength').textContent = data.rssi + ' dBm';";
  html += "  }).catch(e => console.log('WiFi status update failed'));";
  html += "}";
  html += "setInterval(updateWiFiStatus, 5000);"; // 每5秒更新WiFi状态
  // 上传&调试步骤
  html += "function stepMount(){fetch('/api/fs-status').then(r=>r.json()).then(d=>alert('FS mounted:'+d.mounted+' total:'+d.total+' used:'+d.used)).catch(()=>alert('FS状态接口不可用'));}";
  html += "function stepRuntimeStatus(){fetch('/api/runtime-status').then(r=>r.json()).then(d=>alert('available:'+d.available+' size:'+d.size)).catch(()=>alert('runtime-status 不可用'));}";
  html += "function stepUpload(){const f=document.getElementById('rtimg').files[0]; if(!f){alert('请选择 .bin');return;} const fd=new FormData(); fd.append('file', f); fetch('/upload',{method:'POST',body:fd}).then(r=>r.text()).then(t=>alert(t)).catch(e=>alert('上传失败:'+e));}";
  html += "function stepApply(){fetch('/apply',{method:'POST'}).then(r=>r.text()).then(t=>alert(t)).catch(e=>alert('apply失败:'+e));}";
  html += "function stepDownload(){window.open('/runtime.bin','_blank');}";
  html += "function refreshRuntimeCard(){fetch('/api/runtime-status').then(r=>r.json()).then(d=>{document.getElementById('rtinfo').textContent=d.available?('可用, '+d.size+' 字节'):'未找到';});}";
  html += "function stepFormat(){if(confirm('格式化SPIFFS将清空文件，确定？')){fetch('/api/fs-format',{method:'POST'}).then(r=>r.text()).then(t=>alert(t)).catch(()=>alert('format失败'));}}";
  html += "</script>";
  
  html += "<div class='control'><h3>🔄 显示翻转</h3>";
  html += "<div style='margin-bottom:10px;'>当前状态: <span id='flipStatus' style='font-weight:bold;color:#007bff;'>--</span></div>";
  html += "<button class='btn-primary' onclick=\"toggleFlip(true)\">启用水平翻转</button>";
  html += "<button class='btn-danger' onclick=\"toggleFlip(false)\">禁用水平翻转</button>";
  html += "</div>";
  
  // 运行时图像 - 调试步骤面板
  html += "<div class='control'><h3>🧪 上传调试步骤</h3>";
  html += "<div>运行时文件状态: <span id='rtinfo'>--</span></div>";
  html += "<div style='margin-top:8px'><input id='rtimg' type='file' accept='.bin'></div>";
  html += "<div style='margin-top:8px'>";
  html += "<button class='btn-warning' onclick=\"stepMount()\">1) 检查FS</button>";
  html += "<button class='btn-warning' onclick=\"stepRuntimeStatus()\">2) 查看状态</button>";
  html += "<button class='btn-success' onclick=\"stepUpload()\">3) 上传.bin</button>";
  html += "<button class='btn-primary' onclick=\"stepApply()\">4) 应用图像</button>";
  html += "<button class='btn-primary' onclick=\"stepDownload()\">5) 下载核对</button>";
  html += "<button class='btn-warning' onclick=\"refreshRuntimeCard()\">刷新状态</button>";
  html += "<button class='btn-danger' onclick=\"stepFormat()\">格式化SPIFFS</button>";
  html += "</div></div>";
  


  // 显示电源
  html += "<div class='control'><h3>🖥️ 屏幕电源</h3>";
  html += "<button class='btn-primary' onclick=\"fetch('/display-power?on=1')\">开启显示</button>";
  html += "<button class='btn-danger' onclick=\"fetch('/display-power?on=0')\">关闭显示</button>";
  html += "</div>";
  
  html += "<div class='control'><h3>📊 状态信息</h3>";
  html += "<button class='btn-primary' onclick=\"window.location.href='/status'\">查看状态</button>";
  html += "</div>";
  
  html += "</div></body></html>";
  
  server.send(200, "text/html", html);
}

void handleBrightness() {
  String value = server.arg("value");
  
  if (value.length()) {
    int v = value.toInt();
    if (v < 0) v = 0; 
    if (v > 65535) v = 65535;  // 16位寄存器最大值
    
    Serial.print("设置自定义亮度: ");
    Serial.println(v);
    
    setBrightness((u16)v);
    server.send(200, "text/plain", String("亮度设置为 ") + v);
  } else {
    Serial.println("缺少亮度参数");
    server.send(400, "text/plain", "缺少亮度参数");
  }
}

void handleFlip() {
  String enable = server.arg("enable");
  
  if (enable == "true") {
    setTextHorizontalFlip(true);
    server.send(200, "text/plain", "水平翻转已启用");
  } else if (enable == "false") {
    setTextHorizontalFlip(false);
    server.send(200, "text/plain", "水平翻转已禁用");
  } else {
    server.send(400, "text/plain", "无效的翻转参数");
  }
}

// 颜色反转控制
// 重新显示当前图像（用于反转、翻转等设置变更后的刷新）
void refreshDisplay() {
  const u16 panelWidth = 640;
  const u16 panelHeight = 480;
  const u16 chunkRows = 60; // 480/60=8整块，避免边界伪影
  const u16 bytesPerRow = panelWidth / 2;
  u16 rowStart = 0;
  
  while (rowStart < panelHeight) {
    u16 rowsNow = (panelHeight - rowStart) > chunkRows ? chunkRows : (panelHeight - rowStart);
    memset(image, 0, (size_t)bytesPerRow * (size_t)rowsNow);
    packPngScaledRowsToPanel(image, panelWidth, panelHeight,
                             current_image_data, current_image_width, current_image_height,
                             rowStart, rowsNow, invertEnabled);
    u32 lenBytes = (u32)bytesPerRow * (u32)rowsNow;
    display_image(image, lenBytes, 0, (u16)rowStart);
    rowStart += rowsNow;
  }
}

// 从SPIFFS读取运行时图像并刷新
void refreshDisplayFromFS() {
  if (!fsMounted || !SPIFFS.exists(kRuntimeImagePath)) {
    refreshDisplay();
    return;
  }
  const u16 panelWidth = 640;
  const u16 panelHeight = 480;
  const u16 chunkRows = 40;
  const u16 srcBytesPerRow = panelWidth; // 1B/px
  const u16 dstBytesPerRow = panelWidth / 2; // 2px/byte

  File f = SPIFFS.open(kRuntimeImagePath, "r");
  if (!f) { refreshDisplay(); return; }
  size_t expected = (size_t)panelWidth * (size_t)panelHeight;
  if ((size_t)f.size() < expected) { f.close(); refreshDisplay(); return; }

  std::unique_ptr<u8[]> src(new u8[(size_t)srcBytesPerRow * (size_t)chunkRows]);
  std::unique_ptr<u8[]> dst(new u8[(size_t)dstBytesPerRow * (size_t)chunkRows]);

  u16 rowStart = 0;
  while (rowStart < panelHeight) {
    u16 rowsNow = (panelHeight - rowStart) > chunkRows ? chunkRows : (panelHeight - rowStart);
    size_t offset = (size_t)rowStart * (size_t)srcBytesPerRow;
    f.seek((u32)offset, SeekSet);
    size_t toRead = (size_t)srcBytesPerRow * (size_t)rowsNow;
    size_t n = f.read((uint8_t*)src.get(), toRead);
    if (n != toRead) break;
    for (u16 ry = 0; ry < rowsNow; ry++) {
      const u8* s = src.get() + (size_t)ry * (size_t)srcBytesPerRow;
      u8* d = dst.get() + (size_t)ry * (size_t)dstBytesPerRow;
      for (u16 x = 0; x < panelWidth; x += 2) {
        u8 v0 = s[x] & 0x0F; u8 v1 = s[x+1] & 0x0F;
        if (invertEnabled) { v0 = (u8)(0x0F - v0); v1 = (u8)(0x0F - v1); }
        d[x >> 1] = (u8)((v0 << 4) | v1);
      }
    }
    u32 lenBytes = (u32)dstBytesPerRow * (u32)rowsNow;
    display_image((u8*)dst.get(), lenBytes, 0, (u16)rowStart);
    rowStart += rowsNow;
  }
  f.close();
}

void handleInvert() {
  String enable = server.arg("enable");
  if (enable == "true") {
    invertEnabled = true;
    Serial.println("反转已启用");
    refreshDisplay(); // 重新显示图像
    server.send(200, "text/plain", "invert on");
  } else if (enable == "false") {
    invertEnabled = false;
    Serial.println("反转已禁用");
    refreshDisplay(); // 重新显示图像
    server.send(200, "text/plain", "invert off");
  } else {
    server.send(400, "text/plain", "invalid param");
  }
}

// 开关显示电源
void handleDisplayPower() {
  String on = server.arg("on");
  if (on == "1") {
    send_cmd(SPI_DISPLAY_ENABLE);
    send_cmd(SPI_SYNC);
    server.send(200, "text/plain", "display on");
  } else if (on == "0") {
    send_cmd(SPI_DISPLAY_DISABLE);
    send_cmd(SPI_SYNC);
    server.send(200, "text/plain", "display off");
  } else {
    server.send(400, "text/plain", "invalid param");
  }
}

void handleStatus() {
  String html = "<!DOCTYPE html><html><head><meta charset='UTF-8'>";
  html += "<title>AR Device Status</title>";
  html += "<style>body{font-family:Arial;margin:40px;background:#f0f0f0;}";
  html += ".container{max-width:600px;margin:0 auto;background:white;padding:30px;border-radius:10px;box-shadow:0 2px 10px rgba(0,0,0,0.1);}";
  html += "h1{color:#333;text-align:center;}";
  html += ".status-item{margin:15px 0;padding:10px;background:#f8f9fa;border-left:4px solid #007bff;border-radius:4px;}";
  html += ".label{font-weight:bold;color:#495057;}";
  html += ".value{color:#28a745;margin-left:10px;}";
  html += ".refresh-btn{background:#007bff;color:white;padding:10px 20px;border:none;border-radius:5px;cursor:pointer;margin-top:20px;}";
  html += "</style></head><body>";
  html += "<div class='container'>";
  html += "<h1>📊 AR Device Status</h1>";
  
  html += "<div class='status-item'>";
  html += "<span class='label'>🌐 WiFi Network:</span>";
  html += "<span class='value'>" + String(wifi_ssid) + "</span>";
  html += "</div>";
  
  html += "<div class='status-item'>";
  html += "<span class='label'>🔗 IP Address:</span>";
  html += "<span class='value'>" + WiFi.localIP().toString() + "</span>";
  html += "</div>";
  
  html += "<div class='status-item'>";
  html += "<span class='label'>📶 Signal Strength:</span>";
  html += "<span class='value'>" + String(WiFi.RSSI()) + " dBm</span>";
  html += "</div>";
  
  html += "<div class='status-item'>";
  html += "<span class='label'>💡 Current Brightness:</span>";
  html += "<span class='value'>" + String(currentBrightness) + "</span>";
  html += "</div>";
  
  html += "<div class='status-item'>";
  html += "<span class='label'>🔄 Horizontal Flip:</span>";
  html += "<span class='value'>" + String(textFlipEnabled ? "Enabled" : "Disabled") + "</span>";
  html += "</div>";
  
  html += "<div class='status-item'>";
  html += "<span class='label'>⏱️ Uptime:</span>";
  html += "<span class='value'>" + String(millis() / 1000) + " seconds</span>";
  html += "</div>";
  
  html += "<div class='status-item'>";
  html += "<span class='label'>💾 Free RAM:</span>";
  html += "<span class='value'>" + String(ESP.getFreeHeap()) + " bytes</span>";
  html += "</div>";
  
  html += "<div class='status-item'>";
  html += "<span class='label'>💽 Flash Size:</span>";
  html += "<span class='value'>" + String(ESP.getFlashChipSize()) + " bytes</span>";
  html += "</div>";
  {
    bool available = fsMounted && SPIFFS.exists(kRuntimeImagePath);
    size_t sz = 0;
    if (available) { File tf = SPIFFS.open(kRuntimeImagePath, "r"); if (tf) { sz = tf.size(); tf.close(); } }
    html += "<div class='status-item'>";
    html += "<span class='label'>🖼️ Runtime Image:</span>";
    html += "<span class='value'>" + String(available ? "Available" : "Not found") + (available ? (String(", ") + String(sz) + " bytes") : String("")) + "</span>";
    html += "</div>";
  }
  
  html += "<button class='refresh-btn' onclick='window.location.reload()'>🔄 Refresh</button>";
  html += "<button class='refresh-btn' onclick='window.location.href=\"/\"' style='margin-left:10px;background:#28a745;'>🏠 Home</button>";
  html += "</div></body></html>";
  
  server.send(200, "text/html", html);
}

void handleGetBrightness() {
  String json = "{";
  json += "\"current\": " + String(currentBrightness) + ",";
  json += "\"register\": " + String(rd_lum_reg()) + ",";
  json += "\"timestamp\": " + String(millis());
  json += "}";
  
  server.send(200, "application/json", json);
}

void handleGetInvertStatus() {
  String json = "{";
  json += "\"enabled\": " + String(invertEnabled ? "true" : "false") + ",";
  json += "\"status\": \"" + String(invertEnabled ? "启用" : "禁用") + "\"";
  json += "}";
  server.send(200, "application/json", json);
}

void handleGetFlipStatus() {
  String json = "{";
  json += "\"enabled\": " + String(textFlipEnabled ? "true" : "false") + ",";
  json += "\"status\": \"" + String(textFlipEnabled ? "启用" : "禁用") + "\"";
  json += "}";
  server.send(200, "application/json", json);
}

void handleGetWiFiStatus() {
  String json = "{";
  json += "\"ssid\": \"" + String(wifi_ssid) + "\",";
  json += "\"ip\": \"" + WiFi.localIP().toString() + "\",";
  json += "\"rssi\": " + String(WiFi.RSSI()) + ",";
  json += "\"connected\": " + String(WiFi.status() == WL_CONNECTED ? "true" : "false") + ",";
  json += "\"timestamp\": " + String(millis());
  json += "}";
  
  server.send(200, "application/json", json);
}

// 上传处理：数据块写入
void handleUploadData() {
  HTTPUpload& up = server.upload();
  if (up.status == UPLOAD_FILE_START) {
    if (!fsMounted) { Serial.println("/upload: FS未挂载"); return; }
    if (SPIFFS.exists(kRuntimeImagePath)) SPIFFS.remove(kRuntimeImagePath);
    uploadFile = SPIFFS.open(kRuntimeImagePath, "w");
    lastUploadedSize = 0;
    Serial.printf("/upload: start '%s'\n", up.filename.c_str());
  } else if (up.status == UPLOAD_FILE_WRITE) {
    if (uploadFile) {
      uploadFile.write(up.buf, up.currentSize);
      lastUploadedSize += up.currentSize;
    }
  } else if (up.status == UPLOAD_FILE_END) {
    if (uploadFile) uploadFile.close();
    Serial.printf("/upload: end, total=%u bytes\n", (unsigned)lastUploadedSize);
  } else if (up.status == UPLOAD_FILE_ABORTED) {
    if (uploadFile) { uploadFile.close(); }
    if (SPIFFS.exists(kRuntimeImagePath)) { SPIFFS.remove(kRuntimeImagePath); }
    Serial.println("/upload: aborted");
  }
}

// 上传完成后的响应
void handleUploadComplete() {
  if (!fsMounted) { server.send(500, "text/plain", "FS未挂载"); return; }
  if (SPIFFS.exists(kRuntimeImagePath)) {
    File f = SPIFFS.open(kRuntimeImagePath, "r");
    size_t sz = f ? f.size() : 0; if (f) f.close();
    if (sz == 0) server.send(500, "text/plain", "上传失败: 空文件");
    else server.send(200, "text/plain", String("上传完成, 大小 ") + String(sz) + " 字节");
  } else {
    server.send(500, "text/plain", "上传失败");
  }
}

// 应用运行时图像
void handleApply() {
  if (!fsMounted) { server.send(500, "text/plain", "FS未挂载"); return; }
  if (!SPIFFS.exists(kRuntimeImagePath)) { server.send(404, "text/plain", "未找到运行时图像"); return; }
  refreshDisplayFromFS();
  server.send(200, "text/plain", "已应用运行时图像");
}

// 下载当前bin
void handleRuntimeDownload() {
  if (!fsMounted || !SPIFFS.exists(kRuntimeImagePath)) { server.send(404, "text/plain", "未找到"); return; }
  File f = SPIFFS.open(kRuntimeImagePath, "r");
  server.streamFile(f, "application/octet-stream");
  f.close();
}

// 运行时文件状态
void handleGetRuntimeStatus() {
  bool available = fsMounted && SPIFFS.exists(kRuntimeImagePath);
  size_t sz = 0;
  if (available) { File f = SPIFFS.open(kRuntimeImagePath, "r"); if (f) { sz = f.size(); f.close(); } }
  String json = "{";
  json += "\"available\": " + String(available ? "true" : "false") + ",";
  json += "\"size\": " + String(sz);
  json += "}";
  server.send(200, "application/json", json);
}

// FS状态
void handleFsStatus() {
  String json = "{";
  json += "\"mounted\": "; json += fsMounted ? "true" : "false"; json += ",";
  if (fsMounted) {
    size_t total = SPIFFS.totalBytes();
    size_t used = SPIFFS.usedBytes();
    json += "\"total\": "; json += String(total); json += ",";
    json += "\"used\": "; json += String(used);
  } else {
    json += "\"total\": 0, \"used\": 0";
  }
  json += "}";
  server.send(200, "application/json", json);
}

// CRC32 计算
uint32_t crc32_update(uint32_t crc, const uint8_t *data, size_t len) {
  crc = ~crc;
  for (size_t i = 0; i < len; i++) {
    crc ^= data[i];
    for (int j = 0; j < 8; j++) {
      uint32_t mask = -(crc & 1u);
      crc = (crc >> 1) ^ (0xEDB88320u & mask);
    }
  }
  return ~crc;
}

uint32_t computeFileCRC32(File &f) {
  const size_t BUFSZ = 2048;
  uint8_t buf[BUFSZ];
  uint32_t crc = 0;
  f.seek(0, SeekSet);
  while (true) {
    size_t n = f.read(buf, BUFSZ);
    if (n == 0) break;
    crc = crc32_update(crc, buf, n);
  }
  return crc;
}
















void setupWebServer() {
  server.on("/", handleRoot);
  server.on("/brightness", handleBrightness);
  server.on("/flip", handleFlip);
  server.on("/display-power", handleDisplayPower);
  server.on("/status", handleStatus);
  server.on("/api/brightness", handleGetBrightness);
  server.on("/api/invert-status", handleGetInvertStatus);
  server.on("/api/flip-status", handleGetFlipStatus);
  server.on("/invert", handleInvert);
  server.on("/api/wifi-status", handleGetWiFiStatus);

  // 运行时图像上传/应用/下载/状态
  server.on("/upload", HTTP_POST, handleUploadComplete, handleUploadData);
  server.on("/apply", HTTP_POST, handleApply);
  server.on("/api/runtime-status", HTTP_GET, handleGetRuntimeStatus);
  server.on("/runtime.bin", HTTP_GET, handleRuntimeDownload);
  server.on("/api/fs-status", HTTP_GET, handleFsStatus);
  server.on("/api/fs-format", HTTP_POST, [](){
    bool ok = false;
    if (fsMounted) {
      ok = SPIFFS.format();
    }
    server.send(ok ? 200 : 500, "text/plain", ok ? "FS格式化完成" : "FS格式化失败/未挂载");
  });

  
  server.begin();
  Serial.println("Web服务器启动成功!");
  Serial.print("访问地址: http://");
  Serial.println(WiFi.localIP());
}

// 生成带透明背景的绿色圆形到帧缓冲（4bit灰度，每字节两个像素）
void renderGreenCircle(u8 *dest, u16 widthPixels, u16 heightRows, u8 grayLevel) {
  u8 level = (grayLevel > 15) ? 15 : grayLevel;
  u16 bytesPerRow = widthPixels / 2; // 每字节两个像素
  float cx = (float)widthPixels * 0.5f;
  float cy = (float)heightRows * 0.5f;
  float radius = (heightRows < widthPixels ? (float)heightRows : (float)widthPixels) * 0.35f;
  float r2 = radius * radius;

  for (u16 y = 0; y < heightRows; y++) {
    for (u16 x = 0; x < widthPixels; x += 2) {
      float dx0 = (float)x - cx;
      float dy0 = (float)y - cy;
      float dx1 = (float)(x + 1) - cx;
      float dy1 = dy0;
      bool on0 = (dx0 * dx0 + dy0 * dy0) <= r2;
      bool on1 = (dx1 * dx1 + dy1 * dy1) <= r2;
      u8 hi = on0 ? level : 0;
      u8 lo = on1 ? level : 0;
      dest[y * bytesPerRow + (x >> 1)] = (hi << 4) | lo;
    }
  }
}

// 将每像素1字节(0..15)的PNG行块打包为面板4bit/像素缓冲（每字节2像素，行宽固定destWidth=640）
void packPngRowsToPanel(u8 *dest, u16 destWidth, const u8 *src, u16 srcWidth, u16 rowStart, u16 rows) {
  u16 bytesPerRow = destWidth / 2;
  for (u16 ry = 0; ry < rows; ry++) {
    u16 y = rowStart + ry;
    const u8 *srcRow = src + (u32)y * (u32)srcWidth;
    u8 *dstRow = dest + (u32)ry * (u32)bytesPerRow;
    for (u16 x = 0; x < destWidth; x += 2) {
      u8 g0 = 0, g1 = 0;
      if (x < srcWidth) {
        u8 v0 = srcRow[x] & 0x0F;
        g0 = (u8)(0x0F - v0); // invert: 0 -> 15 (bright), 15 -> 0 (black)
      }
      if ((x + 1) < srcWidth) {
        u8 v1 = srcRow[x + 1] & 0x0F;
        g1 = (u8)(0x0F - v1);
      }
      dstRow[x >> 1] = (g0 << 4) | g1;
    }
  }
}

// 将PNG缩放到屏幕尺寸（最近邻），并按行块打包（4bit/像素，0..15）。
void packPngScaledRowsToPanel(u8 *dest,
                              u16 destWidth,
                              u16 destHeight,
                              const u8 *src,
                              u16 srcWidth,
                              u16 srcHeight,
                              u16 rowStart,
                              u16 rows,
                              bool invert) {
  u16 bytesPerRow = destWidth / 2;
  for (u16 ry = 0; ry < rows; ry++) {
    u16 yDst = rowStart + ry;
    u32 ySrc = ((u32)yDst * (u32)srcHeight) / (u32)destHeight;
    if (ySrc >= srcHeight) ySrc = srcHeight - 1;
    const u8 *srcRow = src + (u32)ySrc * (u32)srcWidth;
    u8 *dstRow = dest + (u32)ry * (u32)bytesPerRow;
    for (u16 x = 0; x < destWidth; x += 2) {
      u32 x0Src = ((u32)x * (u32)srcWidth) / (u32)destWidth;
      if (x0Src >= srcWidth) x0Src = srcWidth - 1;
      u32 x1Src = ((u32)(x + 1) * (u32)srcWidth) / (u32)destWidth;
      if (x1Src >= srcWidth) x1Src = srcWidth - 1;
      u8 v0 = srcRow[x0Src] & 0x0F;
      u8 v1 = srcRow[x1Src] & 0x0F;
      if (invert) {
        v0 = (u8)(0x0F - v0);
        v1 = (u8)(0x0F - v1);
      }
      dstRow[x >> 1] = (v0 << 4) | v1;
    }
  }
}

// u32 ID=read_id();
void setup()
{

  // 初始化引脚
  //JBD_init();
  // 配置SPI设置
  SPI.begin(SPI_CLK, SPI_MISO, SPI_MOSI, SPI_CS);
  //SPI.begin();
  SPI.setBitOrder(MSBFIRST);           // 数据位顺序，最高有效位先传输
  SPI.setDataMode(SPI_MODE0);          // 时钟相位和极性，模式
  SPI.setClockDivider(SPI_CLOCK_DIV4); //
  pinMode(SPI_CS, OUTPUT);
  digitalWrite(SPI_CS, HIGH); // 默认禁用从设备
  Serial.begin(115200);
  Serial.println("AR-Ldc-Vision 初始化中...");
  delay_ms(10);
  // 挂载SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("SPIFFS 挂载失败");
    fsMounted = false;
  } else {
    fsMounted = true;
    Serial.println("SPIFFS 已挂载");
  }
  //u32 ID = read_id();
  //u8 Stus = rd_status_reg(SPI_RD_STATUS_REG2);
  //u16 lum = rd_lum_reg();
  //send_cmd(SPI_SELF_TEST_ALL_ON);
  //send_cmd(SPI_SYNC);
  //get_temperature_sensor_data(0x26);
  //u8 elc = rd_cur_reg();
  //lum = rd_lum_reg();
  //u16 ofs=rd_offset_reg();
  //delay_ms(10);
  // 初始化面板
  panel_init();
  
  // 设置文本水平翻转 (true = 翻转, false = 正常)
  setTextHorizontalFlip(false);
  
  // 设置默认亮度
  setBrightness(50);  // 启动时使用适中的默认亮度  

  // 连接WiFi并启动Web服务器
  connectToWiFi();
  if (WiFi.status() == WL_CONNECTED) {
    setupWebServer();
  }  

  // 使用预处理后的本地图像（640x480）分块写入，避免缩放与反相
  const u16 panelWidth = 640;
  const u16 panelHeight = 480;
  const u16 chunkRows = 60; // 480/60=8整块，避免边界伪影
  const u16 bytesPerRow = panelWidth / 2;
  u16 rowStart = 0;
  while (rowStart < panelHeight) {
    u16 rowsNow = (panelHeight - rowStart) > chunkRows ? chunkRows : (panelHeight - rowStart);
    memset(image, 0, (size_t)bytesPerRow * (size_t)rowsNow);
    packPngScaledRowsToPanel(image, panelWidth, panelHeight,
                             current_image_data, current_image_width, current_image_height,
                             rowStart, rowsNow, invertEnabled);
    u32 lenBytes = (u32)bytesPerRow * (u32)rowsNow;
    display_image(image, lenBytes, 0, (u16)rowStart);
    rowStart += rowsNow;
  }
}

void loop()
{
  // 处理Web服务器请求
  server.handleClient();

  // display_image(image, image_len);

  /*
  ============================
  亮度控制示例 - 可以在这里动态调整亮度
  ============================
  */
  // 示例: 动态亮度调整 (取消注释以启用)
  // static unsigned long lastBrightnessChange = 0;
  // if (millis() - lastBrightnessChange > 5000) { // 每5秒改变一次
  //   static bool lowBrightness = true;
  //   if (lowBrightness) {
  //     setBrightnessMedium();
  //   } else {
  //     setBrightnessLow();
  //   }
  //   lowBrightness = !lowBrightness;
  //   lastBrightnessChange = millis();
  // }

  // 监控当前设置 (可选 - 取消注释以在串口查看)
  // u8 elc = rd_cur_reg();
  // u16 lum = rd_lum_reg();
  // u16 ofs = rd_offset_reg();
  // delay(100);
  // MySerial_esp32.println("cosSerial test!!!");
  // MySerial_esp32.print("ID:");
  // MySerial_esp32.println(ID);
  // delay(100);
  // MySerial_esp32.print("电流:");
  // MySerial_esp32.println(elc);
  // delay(100);
  // MySerial_esp32.print("亮度:");
  // MySerial_esp32.println(lum);
  // delay(100);
  // MySerial_esp32.print("偏移:");
  // MySerial_esp32.println(ofs);
  // delay(500);
  /*
  ============================
  */
  // 发送数据
  // SPI.transfer(0x01); // 发送一个字节的数据
  /*
  ==========================================
  逻辑分析仪测试
  digitalWrite(PANELD2,HIGH);
  delay(500);
  digitalWrite(PANELD2,LOW);
  delay(500);
  ==========================================
  */
  // delay(100); // 等待0.1秒钟
}

